{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Fortinet Template Sync","text":"<p>This project is to support maintaining CLI provision templates in a GIT repository and automatically keep it in sync with Fortimanager and the managed firewalls.</p> <p>The intended workflow of how to develop CLI provision templates in a collaboration tool like GitHub is detailed in the GitHub workflow guide</p> <p>You can read more on how to set up your test environment at the lab setup guide.</p>"},{"location":"developer_guide/","title":"Developer Guide","text":"<p>First, thank you for being interested in developing this tool! The following topics tries to describe the intended setup and workflow to develop the library!</p>"},{"location":"developer_guide/#installing_dev_tools","title":"Installing dev tools","text":"<p>For development, you can use the project framework by installing the library with <code>dev</code> extras:</p> <pre><code># clone your fork\ngit clone https://github.com/{YOURFORK}/fortimanager-template-sync.git\n# install in edit mode\npip install -e ./fortimanager-template-sync[dev]\n# optionally install rich to get more fancy debug output and colors\npip install -e ./fortimanager-template-sync[dev,rich]\n</code></pre>"},{"location":"developer_guide/#using_invoke","title":"Using Invoke","text":"<p>The project uses Invoke for common tasks. You may check all tasks supported in the <code>tasks.py</code> config file or just run <code>invoke -l</code></p>"},{"location":"developer_guide/#run_linters","title":"Run linters","text":"<p>Linters are invoked by pre-commit which is installed with the dev tools.</p> <p>You can either use pre-commit through <code>invoke</code>:</p> <pre><code>invoke lint\n</code></pre> <p>Or you can install pre-commit hook and it will then automatically run all checks before accepting any commit:</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"developer_guide/#developing_documentation","title":"Developing documentation","text":"<p>This project uses mkdocs with material theme. Manual documentation is written in Markdown in the <code>docs</code> folder.</p> <p>An easy way of developing is to run mkdocs server and monitor your changes in a browser window.</p> <p>Running the server:</p> <pre><code>invoke mkdocs-serve\n</code></pre>"},{"location":"github_guide/","title":"GitHub Guide","text":"<p>An organization can use GitHub to maintain their configuration templates. GitHub provides many useful collaboration features which can allow to align company requirements with the automation process workflow.</p> <p>Such features are Pull Request, review and approval procedures, protected branches and action workflows.</p> <p>In the Development section, a general workflow will be introduced. It can be used as a baseline process for any future expanded workflows.</p> <p>Danger</p> <p>It is highly recommended to use Enterprise GitHub to avoid accidental leakage of the configuration to the public!</p>"},{"location":"github_guide/github_actions/","title":"Using GitHub actions in template repository","text":"<p>Warning</p> <p>Please do not use public GitHub to store your configuration templates! It's dangerous to pose your sensitive data publicly on the Internet!</p>"},{"location":"github_guide/github_actions/#jinja2_linting","title":"Jinja2 linting","text":"<p>I recommend to use an action like this to check template syntax by each push to the template folders:</p> .github/workflows/jinja-linter.yml<pre><code>---\nname: Jinja2 linting\n#\n# Documentation:\n# https://help.github.com/en/articles/workflow-syntax-for-github-actions\n#\n#############################\n# Start the job on all push #\n#############################\non:\npush:\npaths:\n- templates\n- pre-run\n- templates-groups\nworkflow_dispatch:\n###############\n# Set the Job #\n###############\njobs:\nlinting:\n# Name the Job\nname: Lint Code Base\n# Set the agent to run on\nruns-on: ubuntu-latest\nsteps:\n######################\n# Checkout templates #\n######################\n- name: Checkout Code\nuses: actions/checkout@v4\n################################\n# Run Linter against templates #\n################################\n- name: Install Jinja2\nrun: |\npip install j2lint\n- name: Lint Jinja templates\nrun: |\npython -m j2lint pre-run templates template-groups\n</code></pre>"},{"location":"github_guide/github_actions/#sync_test","title":"Sync test","text":"<p>The sync and deploy actions may be very customized, the following example is only a basic one. Though it is indeed possible to integrate ticketing system, add customized inputs for the action so the user has to provide additional information (e.g. change ticket number)</p> <pre><code>---\nname: Sync Test\non:\npull_request:\nbranches: [production, acceptance]\npaths:\n- templates\n- pre-run\n- templates-groups\nworkflow_dispatch:\njobs:\nlinting:\n# Name the Job\nname: Lint Code Base\n# Set the agent to run on\nruns-on: [\"self-hosted\", \"org-runner\", \"Linux\"]\nsteps:\n######################\n# Checkout templates #\n######################\n- name: Checkout Code\nuses: actions/checkout@v4\n################################\n# Run Linter against templates #\n################################\n- name: Install Jinja2\nrun: |\npip install j2lint\n- name: Lint Jinja templates\nrun: |\npython -m j2lint pre-run templates template-groups\nsync_test:\nname: Sync test run\nruns-on: [\"org-runner\", \"linux\"]\nneeds: linting\nenvironment: $GITHUB_BASE_REF\nsteps:\n- name: Checkout Code\nuses: actions/checkout@v4\nwith:\npath: fmg-templates\n- name: Install and update pip and fmgsync\nrun: |\npip install -U pip\npython -m pip install fortimanager-template-sync\n- name: Run fmgsync test\n# Pre-requisites:\n#  1. to have all environment variables set at GitHub environment/variables &amp; secrets\n#  2. Runner need to access FMG API interface! Set firewalls and network accordingly!\n#  3. The credential used for FMG connection must have API read/write access\nrun: |\npython -m fortimanager_template_sync sync\n</code></pre>"},{"location":"github_guide/github_repository/","title":"GitHub repository setup","text":"<p>This section is about how to set up a GitHub Enterprise repository for holding the template data and how to support certain requirement needed for proper development workflow.</p> <p>The following sections are leading step by step through the procedure of creating a repository, but there is a template one created for testing the tool: fmgsync-test</p>"},{"location":"github_guide/github_repository/#creating_repository","title":"Creating repository","text":"<p>Inline</p> <p>It is advisable not to use default branch name main but rename it to production and have a permanent acceptance branch for the integration tests. It is possible later to merge working branches to acceptance and later acceptance to the production. Rename it as soon as possible to avoid problems later when others started using main and it just disappear for them!</p> <p>When a repository is created for the first time, it does not have any files in it. In this state, the sync tool cannot use the repository. In order to start working with the tool, first the template directory structure must be created.</p> <p>It is also recommended to allow GitHub to create a README file for us. This way we have a minimal documentation possibility, plus we have at least one file in the repository already.</p> <p></p>"},{"location":"github_guide/github_repository/#renaming_default_branch","title":"Renaming default branch","text":""},{"location":"github_guide/github_repository/#repo_settings","title":"Repo settings","text":"<p>After renaming the default branch, certain settings may be configured to form our repository to our needs. Such settings are to disable not required features like Wiki, Projects. All depends on the needs.</p> <p>Collaborators also need to set up! Usually a team need to be added as collaborator where all the people will have access to the repository to do the actual teamwork of developing and reviewing.</p> <p>It is highly advisable to configure <code>Rules</code> which will protect production and acceptance branches from direct push changes and enforcing users to use Pull requests in order to apply changes to those branches. Example of such a ruleset:  </p>"},{"location":"github_guide/github_repository/#folder_structure","title":"Folder structure","text":"<p>This is a basic folder structure with all mandatory folder names. These are picked up by the sync tool and GitHub. Any other folder is optional and allowed. Those are ignored by the tool. Adding extra information, files or folders might be necessary if the repository is used by other tools as well. (For example Nautobot compliance tool)</p> <pre><code>fmgsync-repo\n|\n\u2502   README.md\n\u2502\n\u251c\u2500\u2500\u2500.github\n\u2502   \u2502   pull_request_template.md\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500workflows\n\u2502           jinja-linter.yml\n\u2502\n\u251c\u2500\u2500\u2500pre-run\n\u2502       test_FG101F-init.j2\n\u2502\n\u251c\u2500\u2500\u2500template-groups\n\u2502       test_global.j2\n\u2502\n\u2514\u2500\u2500\u2500templates\n        test_banner.j2\n        test_default-gw.j2\n        test_dns.j2\n</code></pre> <p>All Jinja2 templates have to have the <code>.j2</code> extension! More details can be found be the repository setup section.</p>"},{"location":"github_guide/github_repository/#setting_up_actions","title":"Setting up actions","text":"<p>Actions define workflows to do on certain trigger events. These workflows run on - so called - GitHub runners. These can run on the GitHub server directly, or the runner can be installed locally and those are called self-hosted runners. Most probably self-hosted runner will be needed as the runner needs to access the FMG API interface. It's easier to configure firewall rules, FMG user source restriction if the IP address of the runner is known. If the FMG is in the cloud, the runner also need to be there if otherwise the connectivity is impossible.</p> <p>Some basic example can be found in the GitHub actions section.</p>"},{"location":"github_guide/github_repository/#configure_pull_request_template","title":"Configure Pull Request template","text":"<p>PR template is useful to present a standard form to the users to fill while submitting their pull requests.</p> <p>Here is a very basic example:</p> .github/pull_request_template.md<pre><code>Change ticket: CHGXXXXXXX\n\nReason of this change:\n</code></pre>"},{"location":"github_guide/github_repository/#documentation","title":"Documentation","text":"<p>The root folder of the repository should have a README.md file which should serve as a documentation for the users. It may contain the procedures and rules to follow. It is displayed on the main page of the repository on GitHub. The default .md file is a Markdown file, it's possible to use formatting and enhancing the look of it.</p>"},{"location":"github_guide/github_workflow/","title":"Developing templates","text":"<p>This section tries to describe how an organization can use teamwork to meet the following requirements:</p> <ul> <li>Syntactically correct and standard formatted Jinja templates</li> <li>review and approval process</li> <li>testing in acceptance</li> <li>Merging changes to production</li> </ul> <p>The steps needed to achieve the goal:</p> <pre><code>sequenceDiagram\n  autonumber\n  actor D as Developer\n  participant R as Repository\n  actor T as Team\n  participant FMG\n  participant FW \n  D-&gt;&gt;R: Create Working Branch\n  D-&gt;&gt;R: Make changes and push\n  R-&gt;&gt;R: Action: Jinja linting\n  D-&gt;&gt;R: Create Pull Request\n  R-&gt;&gt;T: Send review request\n  loop Review process\n  T-&gt;&gt;D: Send suggestions / review\n  D-&gt;&gt;R: Make changes\n  end\n  T-&gt;&gt;R: Approve \n  R-&gt;&gt;FMG: Sync test\n  FMG--&gt;FW: Checking FW states\n  R-&gt;&gt;FMG: Sync\n  FMG-&gt;&gt;FW: Install\n  FMG--&gt;FW: Checking FW states again</code></pre>"},{"location":"github_guide/github_workflow/#create_working_branch_for_change","title":"Create working branch for change","text":"<p>The branch name should reflect the change purpose or any relevant business process. It shouldn't be too general, like \"My change\".</p> <p>Note</p> <p>Git branching is a way of parallel working of a state and later it is possible to merge these changes back to the original. The default branch is named 'main' or 'master'. These shouldn't be used in the template repo though.</p> <p>Example of creating a working branch:</p> <p></p>"},{"location":"github_guide/github_workflow/#syntax_checking","title":"Syntax checking","text":"<p>Templates updated need preliminary testing to check syntax and indicate non-compliant Jinja documents. It's important to ensure template standard and correctness.</p> <p>This check is done by GitHub action which triggers by pushing changes to a branch.</p> <p></p>"},{"location":"github_guide/github_workflow/#create_pull_request","title":"Create Pull Request","text":"<p>This step is necessary to notify other reviewers to check the changes.</p> <p>Tip</p> <p>Create a Pull request template in GitHub so all necessary information will be pre-filled automatically by GitHub. More details on official GitHub docs.</p>"},{"location":"github_guide/github_workflow/#opening_pr","title":"Opening PR","text":"<p>Example of opening a Pull Request:</p> <p></p>"},{"location":"github_guide/github_workflow/#fill_in_pr_details","title":"Fill in PR details","text":"<p>Then fill in the required information: </p> <p>It's important to select the appropriate source and destination branches at the top. In this case, the new working branch delete-default-gw-template will be merged back to acceptance. This is to ensure we touch the acceptance system first, and when the change went well with all the testing, there would be another PR which then would go from acceptance to production. Not all acceptance changes may go individually to the production, it may be desirable to collect a set of changes, test them separately and a batch PR could go to the production:</p> <pre><code>sequenceDiagram\n  participant W1 as Working1\n  participant W2 as Working2\n  participant A as Acceptance\n  participant P as Production\n  W1-&gt;&gt;A: Changes1 to acceptance for testing\n  W2-&gt;&gt;A: Changes2 to acceptance for testing\n  A-&gt;&gt;P: Tested acceptance changes to the production</code></pre> <p>Reviewers is also important, it must be set to people of group of people who has right to review, suggest and approve changes in the repository. Most probably these people are a team of more experienced staff about the device templates.</p>"},{"location":"github_guide/github_workflow/#review","title":"Review","text":"<p>This is basically a 4-eye checking phase. This phase can last for long, especially if the change is complex and might require additional testing in lab or consultation with experts. Covering all GitHub features around Reviewing is not in the scope of this document. You can find more information at GitHub code review feature intro.</p> <p>Workflow:</p> <pre><code>sequenceDiagram\n  actor D as Developer\n  participant R as Repository\n  actor T as Reviewer Team\n  D-&gt;&gt;R: Developer initiates change\n  R-&gt;&gt;T: GitHub notifies Reviewer\n  loop Review process\n  T-&gt;&gt;R: Send comments, suggestions\n  D-&gt;&gt;R: make fixes\n  end\n  T-&gt;&gt;R: Set approval\n  D-&gt;&gt;R: Merge PR to target repository </code></pre> <p>A basic review response is like that:</p> <p></p> <p>In this case, we may choose the <code>Request changes</code> button and do not let the requestor to go ahead with merging.</p> <p>All changes in the working branch <code>delete-default-gw-template</code> will be listed on the PR. Let's say the requestor fixed the issue: </p> <p>Now new review is needed. Reviewer can check the result of all changes by the files section:</p> <p></p> <p>Now it looks good, change can be approved and requestor can merge it back to acceptance.</p>"},{"location":"github_guide/github_workflow/#testing","title":"Testing","text":"<p>If GitHub action was assigned to Pull Requests, those will run whenever the source branch changes. This is to keep the state constantly up to date. If a change would cause an issue, the PR merge will be blocked until the issue is not fixed.</p>"},{"location":"github_guide/github_workflow/#merging_pull_request","title":"Merging pull request","text":"<p>It is advisable to use merge with squashing. It means that the repository won't keep history of individual changes of the working branch but it will squash them into one single change. In the production and acceptance branches only the PR merge will be seen in the history.</p>"},{"location":"github_guide/github_workflow/#sync_changes_to_fmg","title":"Sync changes to FMG","text":"<p>This can be done either manually on a console or by GitHub action. CLI log output can be found in the User Guide section.</p> <p>Basic action to do such a sync can be found in the Creating Actions section.</p>"},{"location":"github_guide/github_workflow/#deploy_changes_to_devices","title":"Deploy changes to devices","text":"<p>When all actions are successful, a final step is to install the new CLI templates to the devices. User Guide show example output for such a run. Even deploy job will do initial checks and looks for devices which requires the installation. Not all device in the automation group may be in scope for installation. It all depends on the assignment of those templates.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>common_task</li> <li>config</li> <li>deploy_run</li> <li>deploy_task</li> <li>exceptions</li> <li>fmg_api<ul> <li>connection</li> <li>data</li> </ul> </li> <li>misc</li> <li>sync_run</li> <li>sync_task</li> </ul>"},{"location":"reference/common_task/","title":"common_task","text":""},{"location":"reference/common_task/#common_task.CONF_STATUS","title":"CONF_STATUS  <code>module-attribute</code>","text":"<pre><code>CONF_STATUS = {0: 'unknown', 'unknown': 'unknown', 1: 'insync', 'insync': 'insync', 2: 'outofsync', 'outofsync': 'outofsync'}\n</code></pre>"},{"location":"reference/common_task/#common_task.DB_STATUS","title":"DB_STATUS  <code>module-attribute</code>","text":"<pre><code>DB_STATUS = {0: 'unknown', 'unknown': 'unknown', 1: 'nomod', 'nomod': 'nomod', 2: 'mod', 'mod': 'mod'}\n</code></pre>"},{"location":"reference/common_task/#common_task.DEV_STATUS","title":"DEV_STATUS  <code>module-attribute</code>","text":"<pre><code>DEV_STATUS = {0: 'none', 'none': 'none', 1: 'unknown', 'unknown': 'unknown', 2: 'checkedin', 'checkedin': 'checkedin', 3: 'inprogress', 'inprogress': 'inprogress', 4: 'installed', 'installed': 'installed', 5: 'aborted', 'aborted': 'aborted', 6: 'sched', 'sched': 'sched', 7: 'retry', 'retry': 'retry', 8: 'canceled', 'canceled': 'canceled', 9: 'pending', 'pending': 'pending', 10: 'retrieved', 'retrieved': 'retrieved', 11: 'changed_conf', 'changed_conf': 'changed_conf', 12: 'sync_fail', 'sync_fail': 'sync_fail', 13: 'timeout', 'timeout': 'timeout', 14: 'rev_revert', 'rev_revert': 'rev_revert', 15: 'auto_updated', 'auto_updated': 'auto_updated'}\n</code></pre>"},{"location":"reference/common_task/#common_task.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/common_task/#common_task.CommonTask","title":"CommonTask","text":"<pre><code>CommonTask(settings: FMGSyncSettings, fmg: Optional[FMGSync] = None)\n</code></pre> <p>Common task functionalities</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>FMGSyncSettings</code> <p>task settings</p> required <code>fmg</code> <code>Optional[FMGSync]</code> <p>FMG connection if there is any</p> <code>None</code> Source code in <code>fortimanager_template_sync/common_task.py</code> <pre><code>def __init__(self, settings: FMGSyncSettings, fmg: Optional[FMGSync] = None):\n\"\"\"Initialize task\n    Args:\n        settings: task settings\n        fmg: FMG connection if there is any\n    \"\"\"\nself.settings = settings\nself.fmg = fmg\n</code></pre>"},{"location":"reference/common_task/#common_task.CommonTask._get_firewall_statuses","title":"_get_firewall_statuses","text":"<pre><code>_get_firewall_statuses(group: str) -&gt; Dict[str, Dict[str, Any]]\n</code></pre> <p>Gather firewall statuses in the specified group</p> Source code in <code>fortimanager_template_sync/common_task.py</code> <pre><code>def _get_firewall_statuses(self, group: str) -&gt; Dict[str, Dict[str, Any]]:\n\"\"\"Gather firewall statuses in the specified group\"\"\"\nlogger.info(\"Gathering firewall statuses in group '%s'\", group)\nstatuses = {}\ndevice_list = self.fmg.get_group_members(group_name=group)\nif \"object member\" not in device_list.data.get(\"data\", {}):\nlogger.debug(\"No devices found in group '%s'\", group)\nreturn statuses\nfilters = FilterList()\nfor device in device_list.data.get(\"data\", {}).get(\"object member\"):\nfilters += F(name=device[\"name\"])\nlogger.debug(\"Found %d devices\", len(filters))\ndevice_list = self.fmg.get_devices(filters=filters)\nfor device_status in device_list.data.get(\"data\"):\nstatuses[device_status[\"name\"]] = {\n\"conf_status\": CONF_STATUS.get(device_status[\"conf_status\"]),\n\"db_status\": DB_STATUS.get(device_status[\"db_status\"]),\n\"dev_status\": DEV_STATUS.get(device_status[\"dev_status\"]),\n\"cli_status\": {  # collect CLI template assignments for each VDOM\nvdom[\"name\"]: assign\nfor vdom in device_status.get(\"vdom\", [])\nfor assign in vdom.get(\"assignment info\", [])\nif assign[\"type\"] == \"cli\"\n},\n}\nlogger.debug(\"Device %s: %s\", device_status[\"name\"], statuses[device_status[\"name\"]])\nif any(value is None for value in statuses[device_status[\"name\"]].values()):\nerror = f\"Status of {device_status['name']} is invalid: {statuses[device_status['name']]}\"\nlogger.error(error)\nraise FMGSyncInvalidStatusException(error)\nreturn statuses\n</code></pre>"},{"location":"reference/config/","title":"config","text":"<p>Configuration model</p>"},{"location":"reference/config/#config.FMGSyncSettings","title":"FMGSyncSettings","text":"<p>             Bases: <code>BaseSettings</code></p> <p>Application settings</p>"},{"location":"reference/config/#config.FMGSyncSettings.update_token_in_repo_url","title":"update_token_in_repo_url","text":"<pre><code>update_token_in_repo_url(v: str, info: ValidationInfo)\n</code></pre> <p>add token to url if needed</p> Source code in <code>fortimanager_template_sync/config.py</code> <pre><code>@field_validator(\"template_repo\", mode=\"after\")\ndef update_token_in_repo_url(cls, v: str, info: ValidationInfo):\n\"\"\"add token to url if needed\"\"\"\nurl = AnyHttpUrl(v)\ngit_token: SecretStr = info.data.get(\"git_token\")  # type: ignore # calm mypy, type is assured by pydantic\nif not git_token:\nreturn v\nurl_with_token = Url.build(\nscheme=url.scheme, username=git_token.get_secret_value(), host=url.host or \"\", port=url.port, path=url.path\n)\nreturn str(url_with_token)\n</code></pre>"},{"location":"reference/config/#config.FMGSyncSettings.validate_fmg_url","title":"validate_fmg_url","text":"<pre><code>validate_fmg_url(url: str)\n</code></pre> <p>convert value to string</p> Source code in <code>fortimanager_template_sync/config.py</code> <pre><code>@field_validator(\"fmg_url\", mode=\"after\")\ndef validate_fmg_url(cls, url: str):\n\"\"\"convert value to string\"\"\"\nassert AnyHttpUrl(url)\nreturn url\n</code></pre>"},{"location":"reference/config/#config.FMGSyncSettings.validate_local_repo","title":"validate_local_repo","text":"<pre><code>validate_local_repo(path: Path)\n</code></pre> <p>ensure local repo exists</p> Source code in <code>fortimanager_template_sync/config.py</code> <pre><code>@field_validator(\"local_repo\")\ndef validate_local_repo(cls, path: Path):\n\"\"\"ensure local repo exists\"\"\"\npath.mkdir(exist_ok=True)\nreturn path\n</code></pre>"},{"location":"reference/deploy_run/","title":"deploy_run","text":""},{"location":"reference/deploy_run/#deploy_run.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger('fortimanager_template_sync.deploy_run')\n</code></pre>"},{"location":"reference/deploy_run/#deploy_run.deploy_run","title":"deploy_run","text":"<pre><code>deploy_run(template_repo: Annotated[str, Option(--template - repo, -t, envvar=FMGSYNC_TEMPLATE_REPO, help='Template repository URL')] = None, template_branch: Annotated[str, Option(--template - branch, -b, envvar=FMGSYNC_TEMPLATE_BRANCH, help='Branch in repository to sync')] = 'main', git_token: Annotated[str, Option(--git - token, envvar=FMGSYNC_GIT_TOKEN)] = None, local_repo: Annotated[Path, Option(--local - path, -l, envvar=FMGSYNC_LOCAL_REPO)] = './fmg-templates/', fmg_url: Annotated[str, Option(--fmg - url, -url, envvar=FMGSYNC_FMG_URL)] = None, fmg_user: Annotated[str, Option(--fmg - user, -u, envvar=FMGSYNC_FMG_USER)] = None, fmg_pass: Annotated[str, Option('--fmg-pass', -p, envvar=FMGSYNC_FMG_PASS)] = None, fmg_adom: Annotated[str, Option(--fmg - adom, -a, envvar=FMGSYNC_FMG_ADOM)] = 'root', fmg_verify: Annotated[bool, Option(envvar=FMGSYNC_FMG_VERIFY)] = True, protected_fw_group: Annotated[str, Option(--protected - firewall - group, -pg, envvar=FMGSYNC_PROTECTED_FW_GROUP, help='This group in FMG will be checked for FW status. Also this group will be deployed only')] = 'production', delete_unused_templates: Annotated[bool, Option(--delete - unused - templates, -d)] = False, prod_run: Annotated[bool, Option(--force - changes, -f, help='do changes')] = False)\n</code></pre> <p>FMG FW deployment operation</p> Source code in <code>fortimanager_template_sync/deploy_run.py</code> <pre><code>def deploy_run(\ntemplate_repo: Annotated[\nstr, typer.Option(\"--template-repo\", \"-t\", envvar=\"FMGSYNC_TEMPLATE_REPO\", help=\"Template repository URL\")\n] = None,\ntemplate_branch: Annotated[\nstr,\ntyper.Option(\"--template-branch\", \"-b\", envvar=\"FMGSYNC_TEMPLATE_BRANCH\", help=\"Branch in repository to sync\"),\n] = \"main\",\ngit_token: Annotated[str, typer.Option(\"--git-token\", envvar=\"FMGSYNC_GIT_TOKEN\")] = None,\nlocal_repo: Annotated[Path, typer.Option(\"--local-path\", \"-l\", envvar=\"FMGSYNC_LOCAL_REPO\")] = \"./fmg-templates/\",\nfmg_url: Annotated[str, typer.Option(\"--fmg-url\", \"-url\", envvar=\"FMGSYNC_FMG_URL\")] = None,\nfmg_user: Annotated[str, typer.Option(\"--fmg-user\", \"-u\", envvar=\"FMGSYNC_FMG_USER\")] = None,\nfmg_pass: Annotated[str, typer.Option(\"--fmg-pass\", \"-p\", envvar=\"FMGSYNC_FMG_PASS\")] = None,\nfmg_adom: Annotated[str, typer.Option(\"--fmg-adom\", \"-a\", envvar=\"FMGSYNC_FMG_ADOM\")] = \"root\",\nfmg_verify: Annotated[bool, typer.Option(envvar=\"FMGSYNC_FMG_VERIFY\")] = True,\nprotected_fw_group: Annotated[\nstr,\ntyper.Option(\n\"--protected-firewall-group\",\n\"-pg\",\nenvvar=\"FMGSYNC_PROTECTED_FW_GROUP\",\nhelp=\"This group in FMG will be checked for FW status. Also this group will be deployed only\",\n),\n] = \"production\",\ndelete_unused_templates: Annotated[bool, typer.Option(\"--delete-unused-templates\", \"-d\")] = False,\nprod_run: Annotated[bool, typer.Option(\"--force-changes\", \"-f\", help=\"do changes\")] = False,\n):\n\"\"\"FMG FW deployment operation\"\"\"\nsettings = FMGSyncSettings(\ntemplate_repo=template_repo,\ntemplate_branch=template_branch,\ngit_token=git_token,\nlocal_repo=local_repo,\nfmg_url=fmg_url,\nfmg_user=fmg_user,\nfmg_pass=fmg_pass,\nfmg_adom=fmg_adom,\nfmg_verify=fmg_verify,\nprotected_fw_group=protected_fw_group,\ndelete_unused_templates=delete_unused_templates,\nprod_run=prod_run,\n)\nif not fmg_verify:\nurllib3.disable_warnings(category=urllib3.exceptions.InsecureRequestWarning)\nstart_time = time.time()\nresult = False\ntry:\ntask = FMGDeployTask(settings)\nresult = task.run()\nexcept Exception as err:\nlogger.error(err)\nexit(1)\nfinally:\nlogger.info(\"Operation took %ss\", round(time.time() - start_time, 2))\nif result:\nlogger.info(\"Deploy task finished successfully!\")\nexit(0)\nelse:\nlogger.warning(\"Deploy task finished with problems!\")\nexit(1)\n</code></pre>"},{"location":"reference/deploy_task/","title":"deploy_task","text":"<p>FW deployment task</p>"},{"location":"reference/deploy_task/#deploy_task.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger('fortimanager_template_sync.deploy_task')\n</code></pre>"},{"location":"reference/deploy_task/#deploy_task.FMGDeployTask","title":"FMGDeployTask","text":"<p>             Bases: <code>CommonTask</code></p> <pre><code>Fortimanager Deployment Task\n</code></pre> <p>Steps of this task:</p> <pre><code>1. check firewall statuses\n2. deploy changes to firewalls in protected group only\n3. check firewall statuses again\n</code></pre> <p>Attributes:</p> Name Type Description <code>settings</code> <code>FMGSyncSettings</code> <p>task settings to use</p> <code>fmg</code> <code>FMGSync</code> <p>FMG instance</p>"},{"location":"reference/deploy_task/#deploy_task.FMGDeployTask._deploy_changes","title":"_deploy_changes","text":"<pre><code>_deploy_changes(to_deploy: Dict[str, List[str]])\n</code></pre> <p>Deploy changes to firewalls</p> Source code in <code>fortimanager_template_sync/deploy_task.py</code> <pre><code>def _deploy_changes(self, to_deploy: Dict[str, List[str]]):\n\"\"\"Deploy changes to firewalls\"\"\"\ndef log_install(percent, log):\nnonlocal last_log, last_percent\nif percent == last_percent and last_log == log:\nreturn\nlast_percent = percent\nlast_log = log\nlogger.debug(f\"{percent}%: {log}\")\nlast_log = \"\"\nlast_percent = 0\nscopes = []\nfor fw, vdoms in to_deploy.items():\nfor vdom in vdoms:\nscopes.append(Scope(name=fw, vdom=vdom))\nif scopes:\nif not self.settings.prod_run:\nlogger.info(\"TEST - to deploy to %s\", to_deploy)\nreturn\nlogger.debug(f\"Deploying to {scopes}\")\ntask = self.fmg.get_obj(InstallDeviceTask, adom=self.fmg.adom, flags=[\"auto_lock_ws\"], scope=scopes)\nresult = task.exec()\nif result.success:\nlogger.info(f\"Running install for {len(scopes)} items\")\nresult.wait_for_task(timeout=len(scopes)*120,\ncallback=log_install)\nelse:\nlogger.error(f\"Error by installation: {result.data}\")\nelse:\nlogger.info(\"No firewalls/VDOMs to install templates to\")\n</code></pre>"},{"location":"reference/deploy_task/#deploy_task.FMGDeployTask._get_deployable_firewalls","title":"_get_deployable_firewalls  <code>staticmethod</code>","text":"<pre><code>_get_deployable_firewalls(statuses: Dict[str, Dict[str, Any]]) -&gt; Dict[str, List[str]]\n</code></pre> <p>Get list of firewall names which are to be deployed.</p> Example input - statuses <pre><code>{\n'FW01': {\n'cli_status': {\n'root': {\n'name': 'test_global', 'status': 'modified', 'type': 'cli'\n},\n'VDOM2': {\n'name': 'test_global', 'status': 'modified', 'type': 'cli'\n}\n},\n'conf_status': 'insync', 'db_status': 'nomod', 'dev_status': 'installed'\n},\n'FW01': {\n'cli_status': {\n'root': {\n'name': 'test_global', 'status': 'modified', 'type': 'cli'\n},\n},\n'conf_status': 'insync', 'db_status': 'nomod', 'dev_status': 'installed'\n}\n}\n</code></pre> Example output <pre><code>{\n\"FW1\": [\"root\", \"VDOM2\"],\n\"FW2\": [\"root\"],\n}\n</code></pre> <p>Returns:</p> Type Description <code>Dict[str, List[str]]</code> <p>List of Dicts with firewall name as key and VDOM as value</p> <p>Raises:</p> Type Description <code>FMGSyncInvalidStatusException</code> <p>In case there is a firewall with conf or db modified, error out.</p> Source code in <code>fortimanager_template_sync/deploy_task.py</code> <pre><code>@staticmethod\ndef _get_deployable_firewalls(statuses: Dict[str, Dict[str, Any]]) -&gt; Dict[str, List[str]]:\n\"\"\"Get list of firewall names which are to be deployed.\n    Example input - statuses:\n        ```python\n        {\n            'FW01': {\n                'cli_status': {\n                    'root': {\n                        'name': 'test_global', 'status': 'modified', 'type': 'cli'\n                    },\n                    'VDOM2': {\n                        'name': 'test_global', 'status': 'modified', 'type': 'cli'\n                    }\n                },\n                'conf_status': 'insync', 'db_status': 'nomod', 'dev_status': 'installed'\n            },\n            'FW01': {\n                'cli_status': {\n                    'root': {\n                        'name': 'test_global', 'status': 'modified', 'type': 'cli'\n                    },\n                },\n                'conf_status': 'insync', 'db_status': 'nomod', 'dev_status': 'installed'\n            }\n        }\n        ```\n    Example output:\n        ```python\n        {\n            \"FW1\": [\"root\", \"VDOM2\"],\n            \"FW2\": [\"root\"],\n        }\n        ```\n    Returns:\n        List of Dicts with firewall name as key and VDOM as value\n    Raises:\n        (FMGSyncInvalidStatusException): In case there is a firewall with conf or db modified, error out.\n    \"\"\"\nto_deploy = {}\nnum_of_vdoms = 0\nfor fw, status in statuses.items():\nif status.get(\"conf_status\") == \"outofsync\" or status.get(\"db_status\") == \"mod\":\nraise FMGSyncInvalidStatusException(f\"Firewall {fw} has modified configuration or database\")\nmodified_vdoms = [vdom for vdom in status.get(\"cli_status\") if status[\"cli_status\"][vdom].get(\"status\") == \"modified\"]\nif modified_vdoms:\nto_deploy[fw] = modified_vdoms\nnum_of_vdoms += len(to_deploy[fw])\nlogger.info(f\"Found {num_of_vdoms} firewall/VDOMs to deploy\")\nreturn to_deploy\n</code></pre>"},{"location":"reference/deploy_task/#deploy_task.FMGDeployTask.run","title":"run","text":"<pre><code>run() -&gt; bool\n</code></pre> <p>Run deployment task</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if task succeeded, False otherwise</p> Source code in <code>fortimanager_template_sync/deploy_task.py</code> <pre><code>def run(self) -&gt; bool:\n\"\"\"Run deployment task\n    Returns:\n        (bool): True if task succeeded, False otherwise\n    \"\"\"\nsuccess = True\ntry:\nif not self.fmg:\nself.fmg = FMGSync(\nbase_url=self.settings.fmg_url,\nusername=self.settings.fmg_user,\npassword=self.settings.fmg_pass,\nadom=self.settings.fmg_adom,\nverify=self.settings.fmg_verify,\n).open()\n# 1. check firewall statuses\nstatuses = self._get_firewall_statuses(self.settings.protected_fw_group)\n# 2. find firewalls with applicable status\nto_deploy = self._get_deployable_firewalls(statuses)\n# 3. deploy changes to firewalls in protected group only\nif to_deploy:\nself._deploy_changes(to_deploy)\n# 4. check firewall statuses again\nif self.settings.prod_run and to_deploy:\nstatuses = self._get_firewall_statuses(self.settings.protected_fw_group)\nto_deploy = self._get_deployable_firewalls(statuses)\nif to_deploy:\nlogger.warning(\"The following firewalls are still not updated: %s\", list(to_deploy.keys()))\nsuccess = False\nelse:\nlogger.info(\"CLI template install task ran successfully\")\nelse:\nlogger.info(\"No checking required\")\nfinally:\nself.fmg.close()\nreturn success\n</code></pre>"},{"location":"reference/exceptions/","title":"exceptions","text":"<p>Errors raised in the application</p>"},{"location":"reference/exceptions/#exceptions.FMGSyncConfigurationException","title":"FMGSyncConfigurationException","text":"<p>             Bases: <code>FMGSyncException</code></p> <p>Error in configuration</p>"},{"location":"reference/exceptions/#exceptions.FMGSyncConnectionException","title":"FMGSyncConnectionException","text":"<p>             Bases: <code>FMGSyncException</code></p> <p>Error while connecting to FMG</p>"},{"location":"reference/exceptions/#exceptions.FMGSyncDeleteError","title":"FMGSyncDeleteError","text":"<p>             Bases: <code>FMGSyncException</code></p> <p>Error by deleting object</p>"},{"location":"reference/exceptions/#exceptions.FMGSyncException","title":"FMGSyncException","text":"<p>             Bases: <code>Exception</code></p> <p>General FMG template sync error</p>"},{"location":"reference/exceptions/#exceptions.FMGSyncInvalidStatusException","title":"FMGSyncInvalidStatusException","text":"<p>             Bases: <code>FMGSyncException</code></p> <p>Unknown of invalid device status found</p>"},{"location":"reference/exceptions/#exceptions.FMGSyncVariableException","title":"FMGSyncVariableException","text":"<p>             Bases: <code>FMGSyncException</code></p> <p>Error by variable definitions</p>"},{"location":"reference/misc/","title":"misc","text":"<p>Miscellaneous utilities.</p>"},{"location":"reference/misc/#misc.DEFAULT_LOGGING","title":"DEFAULT_LOGGING  <code>module-attribute</code>","text":"<pre><code>DEFAULT_LOGGING = load('---\\nversion: 1\\nformatters:\\n  simple_format:\\n    format: \"%(asctime)s - %(levelname)s - %(filename)s:%(lineno)s - %(message)s\"\\n    datefmt: \"[%Y-%m-%d %H:%M:%S]\"\\n\\nhandlers:\\n  console:\\n    class : logging.StreamHandler\\n    formatter: simple_format\\n    level   : DEBUG\\n\\nloggers:\\n  fortimanager_template_sync:\\n    level: INFO\\n\\nroot:\\n  level: WARNING\\n  handlers: [console]\\n')\n</code></pre>"},{"location":"reference/misc/#misc.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/misc/#misc.yaml","title":"yaml  <code>module-attribute</code>","text":"<pre><code>yaml = YAML(typ='safe', pure=True)\n</code></pre>"},{"location":"reference/misc/#misc.find_all_vars","title":"find_all_vars","text":"<pre><code>find_all_vars(template_content: str) -&gt; set\n</code></pre> <p>Find all undeclared variables in the given template content.</p> <p>Parameters:</p> Name Type Description Default <code>template_content</code> <code>str</code> <p>The content of the template.</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>set</code> <p>A list of undeclared variables found in the template content.</p> Source code in <code>fortimanager_template_sync/misc.py</code> <pre><code>def find_all_vars(template_content: str) -&gt; set:\n\"\"\"\n    Find all undeclared variables in the given template content.\n    Args:\n        template_content (str): The content of the template.\n    Returns:\n        list: A list of undeclared variables found in the template content.\n    \"\"\"\nenv = Environment()\nparsed_content = env.parse(template_content)\nreturn meta.find_undeclared_variables(parsed_content)\n</code></pre>"},{"location":"reference/misc/#misc.get_logging_config","title":"get_logging_config","text":"<pre><code>get_logging_config(config: str)\n</code></pre> <p>prepare logging config and convert it to dict</p> Source code in <code>fortimanager_template_sync/misc.py</code> <pre><code>def get_logging_config(config: str):\n\"\"\"prepare logging config and convert it to dict\"\"\"\nif config is None:\nreturn DEFAULT_LOGGING\nif Path(config).is_file():\nwith open(config, encoding=\"UTF-8\") as fi:\nconfig = yaml.load(fi)\nreturn config\nraise ValueError(f\"File '{config}' not found!\")\n</code></pre>"},{"location":"reference/misc/#misc.sanitize_variables","title":"sanitize_variables","text":"<pre><code>sanitize_variables(variables: List[Variable]) -&gt; List[Variable]\n</code></pre> <p>De-dup and check variables, so they are unique in name and default value</p> <p>Parameters:</p> Name Type Description Default <code>variables</code> <code>List[Variable]</code> <p>input list of variables</p> required <p>Returns:</p> Type Description <code>List[Variable]</code> <p>list of variables</p> <p>Raises:</p> Type Description <code>FMGSyncVariableException</code> <p>on variable definition problem</p> Source code in <code>fortimanager_template_sync/misc.py</code> <pre><code>def sanitize_variables(variables: List[\"Variable\"]) -&gt; List[\"Variable\"]:\n\"\"\"De-dup and check variables, so they are unique in name and default value\n    Args:\n        variables: input list of variables\n    Returns:\n        list of variables\n    Raises:\n        FMGSyncVariableException: on variable definition problem\n    \"\"\"\ngood_variables = []\nfor variable in variables:\nif variable.name not in good_variables:\ngood_variables.append(variable)\ncontinue\nexisting_var = first([var for var in good_variables if var.name == variable.name])\nif variable.value != existing_var.value:\nerror = f\"Variable {variable.name} has multiple default values amongst templates!\"\nlogger.error(error)\nraise FMGSyncVariableException(error)\nreturn good_variables\n</code></pre>"},{"location":"reference/sync_run/","title":"sync_run","text":""},{"location":"reference/sync_run/#sync_run.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger('fortimanager_template_sync.sync_run')\n</code></pre>"},{"location":"reference/sync_run/#sync_run.sync_run","title":"sync_run","text":"<pre><code>sync_run(template_repo: Annotated[str, Option(--template - repo, -t, envvar=FMGSYNC_TEMPLATE_REPO, help='Template repository URL')] = None, template_branch: Annotated[str, Option(--template - branch, -b, envvar=FMGSYNC_TEMPLATE_BRANCH, help='Branch in repository to sync')] = 'main', git_token: Annotated[str, Option(--git - token, envvar=FMGSYNC_GIT_TOKEN)] = None, local_repo: Annotated[Path, Option(--local - path, -l, envvar=FMGSYNC_LOCAL_REPO)] = './fmg-templates/', fmg_url: Annotated[str, Option(--fmg - url, -url, envvar=FMGSYNC_FMG_URL)] = None, fmg_user: Annotated[str, Option(--fmg - user, -u, envvar=FMGSYNC_FMG_USER)] = None, fmg_pass: Annotated[str, Option('--fmg-pass', -p, envvar=FMGSYNC_FMG_PASS)] = None, fmg_adom: Annotated[str, Option(--fmg - adom, -a, envvar=FMGSYNC_FMG_ADOM)] = 'root', fmg_verify: Annotated[bool, Option(envvar=FMGSYNC_FMG_VERIFY)] = True, protected_fw_group: Annotated[str, Option(--protected - firewall - group, -pg, envvar=FMGSYNC_PROTECTED_FW_GROUP, help='This group in FMG will be checked for FW status. Also this group will be deployed only')] = 'automation', delete_unused_templates: Annotated[bool, Option(--delete - unused - templates, -d)] = False, prod_run: Annotated[bool, Option(--force - changes, -f, help='do changes')] = False)\n</code></pre> <p>GIT/FMG sync operation</p> Source code in <code>fortimanager_template_sync/sync_run.py</code> <pre><code>def sync_run(\ntemplate_repo: Annotated[\nstr, typer.Option(\"--template-repo\", \"-t\", envvar=\"FMGSYNC_TEMPLATE_REPO\", help=\"Template repository URL\")\n] = None,\ntemplate_branch: Annotated[\nstr,\ntyper.Option(\"--template-branch\", \"-b\", envvar=\"FMGSYNC_TEMPLATE_BRANCH\", help=\"Branch in repository to sync\"),\n] = \"main\",\ngit_token: Annotated[str, typer.Option(\"--git-token\", envvar=\"FMGSYNC_GIT_TOKEN\")] = None,\nlocal_repo: Annotated[Path, typer.Option(\"--local-path\", \"-l\", envvar=\"FMGSYNC_LOCAL_REPO\")] = \"./fmg-templates/\",\nfmg_url: Annotated[str, typer.Option(\"--fmg-url\", \"-url\", envvar=\"FMGSYNC_FMG_URL\")] = None,\nfmg_user: Annotated[str, typer.Option(\"--fmg-user\", \"-u\", envvar=\"FMGSYNC_FMG_USER\")] = None,\nfmg_pass: Annotated[str, typer.Option(\"--fmg-pass\", \"-p\", envvar=\"FMGSYNC_FMG_PASS\")] = None,\nfmg_adom: Annotated[str, typer.Option(\"--fmg-adom\", \"-a\", envvar=\"FMGSYNC_FMG_ADOM\")] = \"root\",\nfmg_verify: Annotated[bool, typer.Option(envvar=\"FMGSYNC_FMG_VERIFY\")] = True,\nprotected_fw_group: Annotated[\nstr,\ntyper.Option(\n\"--protected-firewall-group\",\n\"-pg\",\nenvvar=\"FMGSYNC_PROTECTED_FW_GROUP\",\nhelp=\"This group in FMG will be checked for FW status. Also this group will be deployed only\",\n),\n] = \"automation\",\ndelete_unused_templates: Annotated[bool, typer.Option(\"--delete-unused-templates\", \"-d\")] = False,\nprod_run: Annotated[bool, typer.Option(\"--force-changes\", \"-f\", help=\"do changes\")] = False,\n):\n\"\"\"GIT/FMG sync operation\"\"\"\nsettings = FMGSyncSettings(\ntemplate_repo=template_repo,\ntemplate_branch=template_branch,\ngit_token=git_token,\nlocal_repo=local_repo,\nfmg_url=fmg_url,\nfmg_user=fmg_user,\nfmg_pass=fmg_pass,\nfmg_adom=fmg_adom,\nfmg_verify=fmg_verify,\nprotected_fw_group=protected_fw_group,\ndelete_unused_templates=delete_unused_templates,\nprod_run=prod_run,\n)\nif not fmg_verify:\nurllib3.disable_warnings(category=urllib3.exceptions.InsecureRequestWarning)\nstart_time = time.time()\nresult = False\ntry:\ntask = FMGSyncTask(settings)\nresult = task.run()\nexcept Exception as err:\nlogger.error(err)\nfinally:\nlogger.info(\"Operation took %ss\", round(time.time() - start_time, 2))\nif result:\nlogger.info(\"Sync task finished successfully!\")\nexit(0)\nelse:\nlogger.warning(\"Sync task finished with problems!\")\nexit(1)\n</code></pre>"},{"location":"reference/sync_task/","title":"sync_task","text":"<p>FMG Sync Task</p>"},{"location":"reference/sync_task/#sync_task.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger('fortimanager_template_sync.sync_task')\n</code></pre>"},{"location":"reference/sync_task/#sync_task.FMGSyncTask","title":"FMGSyncTask","text":"<p>             Bases: <code>CommonTask</code></p> <p>Fortimanager Sync Task</p> <p>Steps of this task:</p> <ol> <li>update local repository from remote</li> <li>check if there was a change</li> <li>check FMG device status list in protected group. If firewalls are not in sync, stop</li> <li>download FMG templates and template groups from FMG</li> <li>build list of templates to delete from FMG</li> <li>build list of templates to upload to FMG</li> <li>execute changes in FMG</li> </ol> <p>Attributes:</p> Name Type Description <code>settings</code> <code>FMGSyncSettings</code> <p>task settings to use</p> <code>fmg</code> <code>FMGSync</code> <p>FMG instance</p>"},{"location":"reference/sync_task/#sync_task.FMGSyncTask._changed_templates","title":"_changed_templates  <code>staticmethod</code>","text":"<pre><code>_changed_templates(repo_data: TemplateTree, fmg_data: TemplateTree) -&gt; TemplateTree\n</code></pre> <p>Determine to be updated templates and template groups</p> Source code in <code>fortimanager_template_sync/sync_task.py</code> <pre><code>@staticmethod\ndef _changed_templates(repo_data: TemplateTree, fmg_data: TemplateTree) -&gt; TemplateTree:\n\"\"\"Determine to be updated templates and template groups\"\"\"\n# check pre-run templates first\nupdate_pre_run_templates = []\nfor template in repo_data.pre_run_templates:\n# search for existing template\nfmg_template = first(\n(templ for templ in fmg_data.pre_run_templates if template.name == templ.name), default=None\n)\n# if template need to be updated, add it to the list\nif fmg_template != template:\nupdate_pre_run_templates.append(template)\n# check templates\nupdate_templates = []\nfor template in repo_data.templates:\n# search for existing template\nfmg_template = first((templ for templ in fmg_data.templates if template.name == templ.name), default=None)\n# if template need to be updated, add it to the list\nif fmg_template != template:\nupdate_templates.append(template)\n# check template groups\nupdate_template_groups = []\nfor group in repo_data.template_groups:\n# search for existing template\nfmg_group = first((grp for grp in fmg_data.template_groups if group.name == grp.name), default=None)\n# if template group need to be updated, add it to the list\nif fmg_group != group:\nupdate_template_groups.append(group)\nreturn TemplateTree(\ntemplates=update_templates,\npre_run_templates=update_pre_run_templates,\ntemplate_groups=update_template_groups,\n)\n</code></pre>"},{"location":"reference/sync_task/#sync_task.FMGSyncTask._delete_templates","title":"_delete_templates","text":"<pre><code>_delete_templates(templates: TemplateTree)\n</code></pre> <p>Delete templates and template groups</p> <p>Parameters:</p> Name Type Description Default <code>templates</code> <code>TemplateTree</code> <p>template tree object containing CLI templates/groups to delete</p> required Source code in <code>fortimanager_template_sync/sync_task.py</code> <pre><code>def _delete_templates(self, templates: TemplateTree):\n\"\"\"Delete templates and template groups\n    Args:\n        templates (TemplateTree): template tree object containing CLI templates/groups to delete\n    \"\"\"\nlogger.info(\"Deleting unused templates and template-groups\")\nfor template_group in templates.template_groups:\nif self.settings.prod_run:\nlogger.info(\"Deleting template group '%s'\", template_group.name)\nresponse = self.fmg.delete_cli_template_group(template_group.name)\nif not response.success:\nerror = f\"Error deleting '{template_group.name}' template group: {response.data}\"\nlogger.warning(error)\nraise FMGSyncDeleteError(error)\nelse:\nlogger.info(\"TEST - deleting template group '%s'\", template_group.name)\nfor template in templates.pre_run_templates + templates.templates:\nif self.settings.prod_run:\nlogger.info(\"Deleting template '%s'\", template.name)\nresponse = self.fmg.delete_cli_template(template.name)\nif not response.success:\nerror = f\"Error deleting '{template.name}' template: {response.data}\"\nlogger.warning(error)\nraise FMGSyncDeleteError(error)\nelse:\nlogger.info(\"TEST - deleting template '%s'\", template.name)\n</code></pre>"},{"location":"reference/sync_task/#sync_task.FMGSyncTask._find_unused_templates","title":"_find_unused_templates  <code>staticmethod</code>","text":"<pre><code>_find_unused_templates(repo_tree: TemplateTree, fmg_tree: TemplateTree) -&gt; TemplateTree\n</code></pre> <p>Find undefined or unused templates or groups in FMG</p> <p>A template or template group is unused if:</p> <ol> <li>is not assigned to any device or group</li> <li>does not belong to any template-group</li> </ol> Source code in <code>fortimanager_template_sync/sync_task.py</code> <pre><code>@staticmethod\ndef _find_unused_templates(repo_tree: TemplateTree, fmg_tree: TemplateTree) -&gt; TemplateTree:\n\"\"\"Find undefined or unused templates or groups in FMG\n    A template or template group is unused if:\n    1. is not assigned to any device or group\n    2. does not belong to any template-group\n    \"\"\"\n# pre-run templates cannot be part of any group\nto_del_pre_run = [\ntemplate\nfor template in fmg_tree.pre_run_templates\nif template.name not in repo_tree.pre_run_templates and not template.scope_member\n]\n# find all template groups which may be deleted\nto_del_groups = []\nfmg_groups = copy(fmg_tree.template_groups)\nwhile True:\ngroups = [\ngroup\nfor group in fmg_groups\nif group.name not in repo_tree.template_groups  # not in repo\nand not group.scope_member  # not assigned\nand not any(group.name in other.member for other in fmg_groups if other.member)  # not a member\n]\nif groups:  # found to be deleted groups\nto_del_groups.extend(groups)\nfmg_groups = [\ngroup for group in fmg_groups if group not in groups\n]  # remove to be deleted groups from list\n# go and check for more groups to be deleted\nelse:  # no more to be deleted groups found\nbreak\nto_del_templates = [\ntemplate\nfor template in fmg_tree.templates\nif template.name not in repo_tree.templates\nand not template.scope_member\nand not any(template.name in group.member for group in fmg_groups if group.member)\n]\nreturn TemplateTree(pre_run_templates=to_del_pre_run, templates=to_del_templates, template_groups=to_del_groups)\n</code></pre>"},{"location":"reference/sync_task/#sync_task.FMGSyncTask._load_fmg_templates","title":"_load_fmg_templates","text":"<pre><code>_load_fmg_templates() -&gt; TemplateTree\n</code></pre> <p>Load template data from FMG</p> Source code in <code>fortimanager_template_sync/sync_task.py</code> <pre><code>def _load_fmg_templates(self) -&gt; TemplateTree:\n\"\"\"Load template data from FMG\"\"\"\nlogger.info(\"Loading templates from FMG\")\nall_templates = self.fmg.get_cli_templates()\npre_run_templates = [\nCLITemplate(\nname=template[\"name\"],\ndescription=template.get(\"description\"),\nprovision=\"enable\",\nscript=template[\"script\"],\nvariables=[Variable(name=var) for var in template[\"variables\"]],\n)\nfor template in all_templates.data.get(\"data\")\nif template.get(\"provision\") == 1\n]\nlogger.debug(\"%d pre-run templates loaded\", len(pre_run_templates))\ntemplates = [\nCLITemplate(\nname=template[\"name\"],\ndescription=template.get(\"description\"),\nscript=template[\"script\"],\nvariables=[Variable(name=var) for var in template[\"variables\"]],\n)\nfor template in all_templates.data.get(\"data\")\nif template.get(\"provision\") == 0\n]\nlogger.debug(\"%d templates loaded\", len(templates))\nall_groups = self.fmg.get_cli_template_groups()\ntemplate_groups = [\nCLITemplateGroup(\nname=group[\"name\"],\ndescription=group.get(\"description\"),\nmember=group.get(\"member\"),\nvariables=[Variable(name=var) for var in group[\"variables\"]],\nscope_member=group.get(\"scope member\"),\n)\nfor group in all_groups.data.get(\"data\")\n]\nlogger.debug(\"%d template groups loaded\", len(template_groups))\nreturn TemplateTree(templates=templates, pre_run_templates=pre_run_templates, template_groups=template_groups)\n</code></pre>"},{"location":"reference/sync_task/#sync_task.FMGSyncTask._load_local_repository","title":"_load_local_repository","text":"<pre><code>_load_local_repository() -&gt; TemplateTree\n</code></pre> <p>Load files from repository</p> Source code in <code>fortimanager_template_sync/sync_task.py</code> <pre><code>def _load_local_repository(self) -&gt; TemplateTree:\n\"\"\"Load files from repository\"\"\"\nlogger.info(\"Load files from repository\")\ntemplate_path = Path(self.settings.local_repo) / \"templates\"\ntemplates = []\nif template_path.is_dir():\nlogger.debug(\"Loading templates from %s\", template_path)\nfor template_file in template_path.glob(\"*.j2\"):\nwith open(template_file) as fi:\ndata = fi.read()\nparsed_data = self._parse_template_data(name=template_file.name.replace(\".j2\", \"\"), data=data)\ntemplates.append(parsed_data)\npre_run_templates = []\ntemplate_path = Path(self.settings.local_repo) / \"pre-run\"\nif template_path.is_dir():\nlogger.debug(\"Loading pre-run templates from %s\", template_path)\nfor template_file in template_path.glob(\"*.j2\"):\nwith open(template_file) as fi:\ndata = fi.read()\nparsed_data = self._parse_template_data(name=template_file.name.replace(\".j2\", \"\"), data=data)\nparsed_data.provision = \"enable\"\npre_run_templates.append(parsed_data)\ntemplate_groups = []\ntemplate_path = Path(self.settings.local_repo) / \"template-groups\"\nif template_path.is_dir():\nlogger.debug(\"Loading template groups from %s\", template_path)\nfor template_group_file in template_path.glob(\"*.j2\"):\nwith open(template_group_file) as fi:\ndata = fi.read()\nparsed_data = self._parse_template_groups_data(\nname=template_group_file.name.replace(\".j2\", \"\"), data=data, templates=templates\n)\ntemplate_groups.append(parsed_data)\nreturn TemplateTree(templates=templates, pre_run_templates=pre_run_templates, template_groups=template_groups)\n</code></pre>"},{"location":"reference/sync_task/#sync_task.FMGSyncTask._parse_template_data","title":"_parse_template_data  <code>staticmethod</code>","text":"<pre><code>_parse_template_data(name: str, data: str) -&gt; CLITemplate\n</code></pre> <p>Parse template script text</p> <p>Expected format for metadata (head comment):</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the template (file name without extension)</p> required <code>data</code> <code>str</code> <p>raw text of the script file</p> required Source code in <code>fortimanager_template_sync/sync_task.py</code> <pre><code>@staticmethod\ndef _parse_template_data(name: str, data: str) -&gt; CLITemplate:\n\"\"\"Parse template script text\n    Expected format for metadata (head comment):\n    Args:\n        name (str): name of the template (file name without extension)\n        data (str): raw text of the script file\n    \"\"\"\nlogger.debug(\"Parsing '%s' template\", name)\ndescription = \"\"\nvariables = []\nscope_members = None\n# gather metadata\nmatch = re.match(r\"^{#(.*?)#}\", data, re.S + re.I)\nif match:\nheader = match.group(1)\ndescription = header.splitlines()[0].strip()\n# parse used variables\nmatch = re.search(r\"(?&lt;=used vars:)\\s*(?P&lt;vars&gt;.*?)\\n(?:[\\n#-]|$)\", header, flags=re.S + re.I)\nif match and match.group(\"vars\"):\nvars_str = match.group(\"vars\")\nvars_list = vars_str.splitlines()\nfor var in vars_list:\nif \":\" in var:\nvar_name, var_description = var.split(\":\", maxsplit=1)\nvar_value = None\nvar_name = var_name.strip()\nvar_description = var_description.strip()\nmatch = re.search(r\"(?&lt;=default:)\\s*(?P&lt;default&gt;.*?)\\)\", var_description, flags=re.I)\nif match:\nvar_value = match.group(\"default\")\nelse:\nvar_name, var_description, var_value = var, None, None\nvariables.append(Variable(name=var_name, description=var_description, value=var_value))\n# parse assignments\nmatch = re.search(r\"(?&lt;=assigned to:)\\s*(?P&lt;assigned&gt;.*?)\\n\", header, flags=re.S + re.I)\nif match and match.group(\"assigned\"):\ntry:\nassigned = json.loads(match.group(\"assigned\"))\nscope_members = assigned if isinstance(assigned, list) else [assigned]\nexcept json.decoder.JSONDecodeError:\nlogger.warning(\"Assignment target of '%s' at template '%s' is not valid JSON!\")\nraise\ntemplate_vars = find_all_vars(data)\n# filter out built-in datasource\ntemplate_vars = [var for var in template_vars if not var.startswith(\"DVMDB\")]\n# filter out already documented variables\ntemplate_vars = [var for var in template_vars if var not in variables]\nfor template_var in template_vars:\nvariables.append(Variable(name=template_var))\nreturn CLITemplate(\nname=name, description=description, variables=variables, script=data, scope_member=scope_members\n)\n</code></pre>"},{"location":"reference/sync_task/#sync_task.FMGSyncTask._parse_template_groups_data","title":"_parse_template_groups_data  <code>staticmethod</code>","text":"<pre><code>_parse_template_groups_data(name: str, data: str, templates: Optional[List[CLITemplate]] = None) -&gt; CLITemplateGroup\n</code></pre> <p>Parse template group file</p> Source code in <code>fortimanager_template_sync/sync_task.py</code> <pre><code>@staticmethod\ndef _parse_template_groups_data(\nname: str, data: str, templates: Optional[List[CLITemplate]] = None\n) -&gt; CLITemplateGroup:\n\"\"\"Parse template group file\"\"\"\nlogger.debug(\"Parsing '%s' group\", name)\ndescription = None\nmembers = []\nvariables = []\nscope_members = None\n# gather metadata\nmatch = re.match(r\"^{#(.*?)#}\", data, re.S + re.I)\nif match:\nheader = match.group(1)\ndescription = header.splitlines()[0].strip()\n# parse assignments\nmatch = re.search(r\"(?&lt;=assigned to:)\\s*(?P&lt;assigned&gt;.*?)\\n\", header, flags=re.S + re.I)\nif match and match.group(\"assigned\"):\ntry:\nassigned = json.loads(match.group(\"assigned\"))\nscope_members = assigned if isinstance(assigned, list) else [assigned]\nexcept json.decoder.JSONDecodeError:\nlogger.warning(\"Assignment target of '%s' at template '%s' is not valid JSON!\")\nraise\n# gather members\nfor match in re.finditer(r\"{%\\s*include\\s*\\\"templates/(?P&lt;member&gt;.*).j2\\\"\\s*%}\", data, re.M):\nmembers.append(match.group(\"member\"))\n# gather variables\nfor template in templates:\nvariables.extend(template.variables)  # flat out lists\n# deduplicate and sanity check on variables\nvariables = sanitize_variables(variables=variables)\nreturn CLITemplateGroup(\nname=name, description=description, member=members, variables=variables, scope_member=scope_members\n)\n</code></pre>"},{"location":"reference/sync_task/#sync_task.FMGSyncTask._update_fmg_templates","title":"_update_fmg_templates","text":"<pre><code>_update_fmg_templates(templates: TemplateTree, fmg_templates: TemplateTree) -&gt; bool\n</code></pre> <p>Update templates and template groups</p> Source code in <code>fortimanager_template_sync/sync_task.py</code> <pre><code>def _update_fmg_templates(self, templates: TemplateTree, fmg_templates: TemplateTree) -&gt; bool:\n\"\"\"Update templates and template groups\"\"\"\n# need to update variables first\nhad_changed = False\nto_add_vars = [variable for variable in templates.variables if variable.name not in fmg_templates.variables]\nif to_add_vars:\nlogger.info(\"Adding missing variables\")\nfor variable in to_add_vars:\nif self.settings.prod_run:\nresult = self.fmg.set_fmg_variable(**variable.model_dump(by_alias=True))\nif not result.success:\nlogger.error(\"Error adding variable '%s'\", variable.name)\ncontinue\nelse:\nlogger.info(\"TEST - Adding variable '%s'\", variable.name)\nhad_changed = True\nlogger.info(\"Updating templates\")\nfor template in (*templates.pre_run_templates, *templates.templates):\nif self.settings.prod_run:\nresult = self.fmg.set_cli_template(**template.model_dump(by_alias=True))\nif not result.success:\nlogger.error(\"Error updating template '%s'\", template.name)\ncontinue\nelif template.scope_member:\nself.fmg.assign_cli_template(template.name, template.scope_member)\nelse:\nlogger.info(\"TEST - Updating template '%s'\", template.name)\nhad_changed = True\nfor template_group in templates.template_groups:\nif self.settings.prod_run:\nresult = self.fmg.set_cli_template_group(**template_group.model_dump(by_alias=True))\nif not result.success:\nlogger.error(\"Error updating template group '%s'\", template_group.name)\ncontinue\nelif template_group.scope_member:\nself.fmg.assign_cli_template_group(template_group.name, template_group.scope_member)\nelse:\nlogger.info(\"TEST - Updating template_group '%s'\", template_group.name)\nhad_changed = True\nreturn had_changed\n</code></pre>"},{"location":"reference/sync_task/#sync_task.FMGSyncTask._update_local_repository","title":"_update_local_repository","text":"<pre><code>_update_local_repository() -&gt; Optional[Repo]\n</code></pre> <p>Clone or update local repository</p> <p>Repository is expected in this format:</p> <pre><code>pre-run/\n    pre-run1.j2\n    pre-run2.j2\n    ...\ntemplates/\n    template1.j2\n    template2.j2\n    ...\ntemplate-groups/\n    group1.j2\n    group2.j2\n    ...\n</code></pre> <p>Any other files are ignored. All directories are optional, it's not mandatory to have all of them. See docs for additional information.</p> <p>Returns:</p> Type Description <code>Optional[Repo]</code> <p>Repository with cloned templates</p> Source code in <code>fortimanager_template_sync/sync_task.py</code> <pre><code>def _update_local_repository(self) -&gt; Optional[Repo]:\n\"\"\"Clone or update local repository\n    Repository is expected in this format:\n    ```\n    pre-run/\n        pre-run1.j2\n        pre-run2.j2\n        ...\n    templates/\n        template1.j2\n        template2.j2\n        ...\n    template-groups/\n        group1.j2\n        group2.j2\n        ...\n    ```\n    Any other files are ignored. All directories are optional, it's not mandatory to have all of them.\n    See [docs](../user_guide/repository.md) for additional information.\n    Returns:\n        Repository with cloned templates\n    \"\"\"\nlogger.info(\"Checking out template repository\")\ntry:\nrepo = Repo(self.settings.local_repo)\nrepo.git.pull()  # download updates\nrepo.git.checkout(self.settings.template_branch)\nreturn repo\nexcept InvalidGitRepositoryError:  # in case of an empty directory\nlogger.info(\"Cloning template repository\")\nrepo = Repo.clone_from(\nurl=self.settings.template_repo, to_path=self.settings.local_repo, branch=self.settings.template_branch\n)\nreturn repo\nexcept GitCommandError:\nlogger.error(\n\"Can't checkout repo: '%s' branch: '%s'\", self.settings.template_repo, self.settings.template_branch\n)\nraise\n</code></pre>"},{"location":"reference/sync_task/#sync_task.FMGSyncTask.run","title":"run","text":"<pre><code>run() -&gt; bool\n</code></pre> <p>Run sync task</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if sync task succeeded, False otherwise</p> Source code in <code>fortimanager_template_sync/sync_task.py</code> <pre><code>def run(self) -&gt; bool:\n\"\"\"Run sync task\n    Returns:\n        (bool): True if sync task succeeded, False otherwise\n    \"\"\"\nsuccess = False\nchanges = False\n# 1. update local repository from remote\nrepo = self._update_local_repository()\nif not repo:\nlogger.error(\"Repository couldn't be updated!\")\nreturn success\n# 2. load data from the repo\nrepo_data = self._load_local_repository()\nif not repo_data:\nlogger.error(\"Repository couldn't be parsed!\")\nreturn success\n# Initialize FMG connection\n# 3. check FMG device status list in protected group\n#    If firewalls are not in sync, stop\ntry:\nif not self.fmg:\nself.fmg = FMGSync(\nbase_url=self.settings.fmg_url,\nusername=self.settings.fmg_user,\npassword=self.settings.fmg_pass,\nadom=self.settings.fmg_adom,\nverify=self.settings.fmg_verify,\n).open()\nself._ensure_device_statuses(self._get_firewall_statuses(self.settings.protected_fw_group))\n# 4. download FMG templates and template groups from FMG\nfmg_templates = self._load_fmg_templates()\n# 5. build list of templates to delete from FMG\nto_delete = None\nif self.settings.delete_unused_templates:\nto_delete = self._find_unused_templates(repo_data, fmg_templates)\n# 6. build list of templates to upload to FMG\nto_upload = self._changed_templates(repo_data, fmg_templates)\n# 7. execute changes in FMG\nif to_delete:\nchanges = self._delete_templates(to_delete)\nelif self.settings.delete_unused_templates:\nlogger.info(\"No templates to delete\")\nif to_upload:\nchanges = self._update_fmg_templates(templates=to_upload, fmg_templates=fmg_templates) or changes\nelse:\nlogger.info(\"No templates to update!\")\nsuccess = True\nexcept Exception as err:\nlogger.error(err)\nfinally:\nif changes and self.settings.prod_run:\nlogger.info(\"Changes applied successfully\")\nelse:\nlogger.info(\"No changes happened\")\nif self.fmg:\nself.fmg.close(discard_changes=not success)\nreturn success\n</code></pre>"},{"location":"reference/fmg_api/__init__/","title":"fmg_api","text":"<p>FMG API extension</p>"},{"location":"reference/fmg_api/__init__/#fmg_api.__all__","title":"__all__  <code>module-attribute</code>","text":"<pre><code>__all__ = ('FMGSync')\n</code></pre>"},{"location":"reference/fmg_api/connection/","title":"connection","text":"<p>FMG connection</p>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync","title":"FMGSync","text":"<p>             Bases: <code>FMG</code></p> <p>Fortimanager connection class</p>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.add_cli_template","title":"add_cli_template","text":"<pre><code>add_cli_template(name: str, script: str, description: str = '', provision: Literal['disable', 'enable'] = 'disable', type: Literal['cli', 'jinja'] = 'jinja', variables: Optional[List[dict]] = None) -&gt; FMGResponse\n</code></pre> <p>Add CLI template</p> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def add_cli_template(\nself,\nname: str,\nscript: str,\ndescription: str = \"\",\nprovision: Literal[\"disable\", \"enable\"] = \"disable\",\ntype: Literal[\"cli\", \"jinja\"] = \"jinja\",\nvariables: Optional[List[dict]] = None,\n) -&gt; FMGResponse:\n\"\"\"Add CLI template\"\"\"\nif not variables:\nvariables = []\nif self._settings.adom == \"global\":\nurl = \"/pm/config/global/obj/cli/template\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/cli/template\"\nrequest = {\n\"data\": {\n\"description\": description,\n\"name\": name,\n\"provision\": provision,\n\"script\": script,\n\"type\": type,\n\"variables\": [variable[\"name\"] for variable in variables],\n},\n\"url\": url,\n}\nreturn self.add(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.add_cli_template_group","title":"add_cli_template_group","text":"<pre><code>add_cli_template_group(name: str, description: str = '', member: Optional[List[str]] = None, variables: Optional[List[dict]] = None) -&gt; FMGResponse\n</code></pre> <p>Add CLI template group</p> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def add_cli_template_group(\nself,\nname: str,\ndescription: str = \"\",\nmember: Optional[List[str]] = None,\nvariables: Optional[List[dict]] = None,\n) -&gt; FMGResponse:\n\"\"\"Add CLI template group\"\"\"\nif not variables:\nvariables = []\nif not member:\nmember = []\nif self._settings.adom == \"global\":\nurl = \"/pm/config/global/obj/cli/template-group\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/cli/template-group\"\nrequest = {\n\"data\": {\n\"description\": description,\n\"name\": name,\n\"member\": member,\n\"variables\": [variable[\"name\"] for variable in variables],\n},\n\"url\": url,\n}\nreturn self.add(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.add_fmg_variable","title":"add_fmg_variable","text":"<pre><code>add_fmg_variable(name: str, value: Optional[str] = None, description: Optional[str] = None) -&gt; FMGResponse\n</code></pre> <p>Add metadata variable to use in CLI templates</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>variable name</p> required <code>value</code> <code>str</code> <p>default value</p> <code>None</code> <code>description</code> <code>str</code> <p>variable description</p> <code>None</code> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def add_fmg_variable(\nself, name: str, value: Optional[str] = None, description: Optional[str] = None\n) -&gt; FMGResponse:\n\"\"\"Add metadata variable to use in CLI templates\n    Args:\n        name (str): variable name\n        value (str): default value\n        description (str): variable description\n    \"\"\"\nif self._settings.adom == \"global\":\nurl = \"/pm/config/global/obj/fmg/variable\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/fmg/variable\"\nrequest = {\n\"data\": {\n\"description\": description,\n\"name\": name,\n\"value\": value,\n},\n\"url\": url,\n}\nreturn self.add(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.assign_cli_template","title":"assign_cli_template","text":"<pre><code>assign_cli_template(template: str, target: Union[Dict[str, str], List[Dict[str, str]]])\n</code></pre> <p>Assign group or device to template</p> <p>Examples:</p> <p>target = {\"name\": \"mygroup\"}</p> <p>target = {\"name\": \"myfw\", \"vdom\": \"root\"}</p> <p>target = [ {\"name\": \"group1\"}, {\"name\": \"group2\"} ]</p> <p>Parameters:</p> Name Type Description Default <code>template</code> <code>str</code> <p>name of template</p> required <code>target</code> <code>Union[Dict[str, str], List[Dict[str, str]]]</code> <p>a single object or a list of objects to assign to the template</p> required Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def assign_cli_template(self, template: str, target: Union[Dict[str, str], List[Dict[str, str]]]):\n\"\"\"Assign group or device to template\n    Examples:\n        target = {\"name\": \"mygroup\"}\n        target = {\"name\": \"myfw\", \"vdom\": \"root\"}\n        target = [ {\"name\": \"group1\"}, {\"name\": \"group2\"} ]\n    Args:\n        template: name of template\n        target: a single object or a list of objects to assign to the template\n    \"\"\"\nif not isinstance(target, list):\ntarget = [target]\nif self._settings.adom == \"global\":\nurl = f\"/pm/config/global/obj/cli/template/{template}/scope member\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/cli/template/{template}/scope member\"\nrequest = {\"data\": target, \"url\": url}\nreturn self.add(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.assign_cli_template_group","title":"assign_cli_template_group","text":"<pre><code>assign_cli_template_group(template_group: str, target: Union[Dict[str, str], List[Dict[str, str]]])\n</code></pre> <p>Assign group or device to template group</p> <p>Examples:</p> <p>target = {\"name\": \"mygroup\"}</p> <p>target = {\"name\": \"myfw\", \"vdom\": \"root\"}</p> <p>target = [ {\"name\": \"group1\"}, {\"name\": \"group2\"} ]</p> <p>Parameters:</p> Name Type Description Default <code>template_group</code> <code>str</code> <p>name of template</p> required <code>target</code> <code>Union[Dict[str, str], List[Dict[str, str]]]</code> <p>a single object or a list of objects to assign to the template</p> required <p>Raises:</p> Type Description <code>FMGInvalidDataException</code> <p>if target is invalid or non-existent</p> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def assign_cli_template_group(self, template_group: str, target: Union[Dict[str, str], List[Dict[str, str]]]):\n\"\"\"Assign group or device to template group\n    Examples:\n        target = {\"name\": \"mygroup\"}\n        target = {\"name\": \"myfw\", \"vdom\": \"root\"}\n        target = [ {\"name\": \"group1\"}, {\"name\": \"group2\"} ]\n    Args:\n        template_group: name of template\n        target: a single object or a list of objects to assign to the template\n    Raises:\n        FMGInvalidDataException: if target is invalid or non-existent\n    \"\"\"\nif not isinstance(target, list):\ntarget = [target]\nif self._settings.adom == \"global\":\nurl = f\"/pm/config/global/obj/cli/template-group/{template_group}/scope member\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/cli/template-group/{template_group}/scope member\"\nrequest = {\"data\": target, \"url\": url}\nreturn self.add(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.delete_cli_template","title":"delete_cli_template","text":"<pre><code>delete_cli_template(name: str) -&gt; FMGResponse\n</code></pre> <p>Delete CLI template</p> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def delete_cli_template(self, name: str) -&gt; FMGResponse:\n\"\"\"Delete CLI template\"\"\"\nif self._settings.adom == \"global\":\nurl = f\"/pm/config/global/obj/cli/template/{name}\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/cli/template/{name}\"\nrequest = {\n\"url\": url,\n}\nreturn self.delete(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.delete_cli_template_group","title":"delete_cli_template_group","text":"<pre><code>delete_cli_template_group(name: str) -&gt; FMGResponse\n</code></pre> <p>Delete CLI template</p> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def delete_cli_template_group(self, name: str) -&gt; FMGResponse:\n\"\"\"Delete CLI template\"\"\"\nif self._settings.adom == \"global\":\nurl = f\"/pm/config/global/obj/cli/template-group/{name}\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/cli/template-group/{name}\"\nrequest = {\n\"url\": url,\n}\nreturn self.delete(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.get_cli_template","title":"get_cli_template","text":"<pre><code>get_cli_template(name: str) -&gt; FMGResponse\n</code></pre> <p>Get a specific CLI template</p> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def get_cli_template(self, name: str) -&gt; FMGResponse:\n\"\"\"Get a specific CLI template\"\"\"\nif self._settings.adom == \"global\":\nurl = f\"/pm/config/global/obj/cli/template/{name}\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/cli/template/{name}\"\nrequest = {\n\"url\": url,\n\"option\": \"scope member\",\n}\nreturn self.get(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.get_cli_template_group","title":"get_cli_template_group","text":"<pre><code>get_cli_template_group(name: str) -&gt; FMGResponse\n</code></pre> <p>Get a specific CLI template group</p> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def get_cli_template_group(self, name: str) -&gt; FMGResponse:\n\"\"\"Get a specific CLI template group\"\"\"\nif self._settings.adom == \"global\":\nurl = f\"/pm/config/global/obj/cli/template-group/{name}\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/cli/template-group/{name}\"\nrequest = {\n\"url\": url,\n\"option\": \"scope member\",\n}\nreturn self.get(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.get_cli_template_groups","title":"get_cli_template_groups","text":"<pre><code>get_cli_template_groups(filters: FILTER_TYPE = None) -&gt; FMGResponse\n</code></pre> <p>Get CLI template groups</p> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def get_cli_template_groups(self, filters: FILTER_TYPE = None) -&gt; FMGResponse:\n\"\"\"Get CLI template groups\"\"\"\nif self._settings.adom == \"global\":\nurl = \"/pm/config/global/obj/cli/template-group\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/cli/template-group\"\nrequest = {\n\"url\": url,\n\"option\": \"scope member\",\n}\nif filters:\nrequest[\"filter\"] = self._get_filter_list(filters)\ntry:\nreturn self.get(request)\nexcept FMGEmptyResultException:\nreturn FMGResponse(data={\"data\": []})\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.get_cli_templates","title":"get_cli_templates","text":"<pre><code>get_cli_templates(filters: FILTER_TYPE = None) -&gt; FMGResponse\n</code></pre> <p>Get CLI templates</p> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def get_cli_templates(self, filters: FILTER_TYPE = None) -&gt; FMGResponse:\n\"\"\"Get CLI templates\"\"\"\nif self._settings.adom == \"global\":\nurl = \"/pm/config/global/obj/cli/template\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/cli/template\"\nrequest = {\n\"url\": url,\n\"option\": \"scope member\",\n}\nif filters:\nrequest[\"filter\"] = self._get_filter_list(filters)\nreturn self.get(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.get_devices","title":"get_devices","text":"<pre><code>get_devices(filters: FILTER_TYPE = None)\n</code></pre> <p>Get devices</p> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def get_devices(self, filters: FILTER_TYPE = None):\n\"\"\"Get devices\"\"\"\nif self._settings.adom == \"global\":\nurl = \"/dvmdb/device\"\nelse:\nurl = f\"/dvmdb/adom/{self._settings.adom}/device\"\nrequest = {\n\"url\": url,\n\"fields\": [\"name\", \"conf_status\", \"conn_status\", \"db_status\", \"dev_status\"],\n\"loadsub\": 1,  # gather vdoms\n\"option\": [\n\"extra info\",\n\"assignment info\",\n],\n}\nif filters:\nrequest[\"filter\"] = self._get_filter_list(filters)\nreturn self.get(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.get_fmg_variable","title":"get_fmg_variable","text":"<pre><code>get_fmg_variable(name: str) -&gt; FMGResponse\n</code></pre> <p>Get a specific variable</p> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def get_fmg_variable(self, name: str) -&gt; FMGResponse:\n\"\"\"Get a specific variable\"\"\"\nif self._settings.adom == \"global\":\nurl = f\"/pm/config/global/obj/fmg/variable/{name}\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/fmg/variable/{name}\"\nrequest = {\n\"url\": url,\n}\nreturn self.get(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.get_fmg_variables","title":"get_fmg_variables","text":"<pre><code>get_fmg_variables(filters: FILTER_TYPE = None) -&gt; FMGResponse\n</code></pre> <p>Get metadata variables based on filter</p> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def get_fmg_variables(self, filters: FILTER_TYPE = None) -&gt; FMGResponse:\n\"\"\"Get metadata variables based on filter\"\"\"\nif self._settings.adom == \"global\":\nurl = \"/pm/config/global/obj/fmg/variable\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/fmg/variable\"\nrequest = {\n\"url\": url,\n}\nif filters:\nrequest[\"filter\"] = self._get_filter_list(filters)\nreturn self.get(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.get_group_members","title":"get_group_members","text":"<pre><code>get_group_members(group_name: str)\n</code></pre> <p>Get group members</p> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def get_group_members(self, group_name: str):\n\"\"\"Get group members\"\"\"\nif self._settings.adom == \"global\":\nurl = f\"/dvmdb/group/{group_name}\"\nelse:\nurl = f\"/dvmdb/adom/{self._settings.adom}/group/{group_name}\"\nrequest = {\"option\": \"object member\", \"url\": url}\nreturn self.get(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.set_cli_template","title":"set_cli_template","text":"<pre><code>set_cli_template(name: str, script: str, new_name: str = '', description: str = '', provision: Literal['disable', 'enable'] = 'disable', type: Literal['cli', 'jinja'] = 'jinja', variables: Optional[List[dict]] = None) -&gt; FMGResponse\n</code></pre> <p>Update a CLI template</p> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def set_cli_template(\nself,\nname: str,\nscript: str,\nnew_name: str = \"\",\ndescription: str = \"\",\nprovision: Literal[\"disable\", \"enable\"] = \"disable\",\ntype: Literal[\"cli\", \"jinja\"] = \"jinja\",\nvariables: Optional[List[dict]] = None,\n) -&gt; FMGResponse:\n\"\"\"Update a CLI template\"\"\"\nif not variables:\nvariables = []\nif self._settings.adom == \"global\":\nurl = f\"/pm/config/global/obj/cli/template/{name}\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/cli/template/{name}\"\nif new_name:\nname = new_name\nrequest = {\n\"data\": {\n\"description\": description,\n\"name\": name,\n\"provision\": provision,\n\"script\": script,\n\"type\": type,\n\"variables\": [variable[\"name\"] for variable in variables],\n},\n\"url\": url,\n}\nreturn self.set(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.set_cli_template_group","title":"set_cli_template_group","text":"<pre><code>set_cli_template_group(name: str, description: str = '', member: Optional[List[str]] = None, variables: Optional[List[dict]] = None) -&gt; FMGResponse\n</code></pre> <p>Set CLI template group</p> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def set_cli_template_group(\nself,\nname: str,\ndescription: str = \"\",\nmember: Optional[List[str]] = None,\nvariables: Optional[List[dict]] = None,\n) -&gt; FMGResponse:\n\"\"\"Set CLI template group\"\"\"\nif not variables:\nvariables = []\nif not member:\nmember = []\nif self._settings.adom == \"global\":\nurl = \"/pm/config/global/obj/cli/template-group\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/cli/template-group\"\nrequest = {\n\"data\": {\n\"description\": description,\n\"name\": name,\n\"member\": member,\n\"variables\": [variable[\"name\"] for variable in variables],\n},\n\"url\": url,\n}\nreturn self.set(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.set_fmg_variable","title":"set_fmg_variable","text":"<pre><code>set_fmg_variable(name: str, value: Optional[str] = None, description: Optional[str] = None) -&gt; FMGResponse\n</code></pre> <p>Update metadata variable to use in CLI templates</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>variable name</p> required <code>value</code> <code>str</code> <p>default value</p> <code>None</code> <code>description</code> <code>str</code> <p>variable description</p> <code>None</code> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def set_fmg_variable(\nself, name: str, value: Optional[str] = None, description: Optional[str] = None\n) -&gt; FMGResponse:\n\"\"\"Update metadata variable to use in CLI templates\n    Args:\n        name (str): variable name\n        value (str): default value\n        description (str): variable description\n    \"\"\"\nif self._settings.adom == \"global\":\nurl = \"/pm/config/global/obj/fmg/variable\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/fmg/variable\"\nrequest = {\n\"data\": {\n\"description\": description,\n\"name\": name,\n\"value\": value,\n},\n\"url\": url,\n}\nreturn self.set(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.update_cli_template","title":"update_cli_template","text":"<pre><code>update_cli_template(name: str, script: str, new_name: str = '', description: str = '', provision: Literal['disable', 'enable'] = 'disable', type: Literal['cli', 'jinja'] = 'jinja', variables: Optional[List[dict]] = None) -&gt; FMGResponse\n</code></pre> <p>Update a CLI template</p> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def update_cli_template(\nself,\nname: str,\nscript: str,\nnew_name: str = \"\",\ndescription: str = \"\",\nprovision: Literal[\"disable\", \"enable\"] = \"disable\",\ntype: Literal[\"cli\", \"jinja\"] = \"jinja\",\nvariables: Optional[List[dict]] = None,\n) -&gt; FMGResponse:\n\"\"\"Update a CLI template\"\"\"\nif not variables:\nvariables = []\nif self._settings.adom == \"global\":\nurl = f\"/pm/config/global/obj/cli/template/{name}\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/cli/template/{name}\"\nif new_name:\nname = new_name\nrequest = {\n\"data\": {\n\"description\": description,\n\"name\": name,\n\"provision\": provision,\n\"script\": script,\n\"type\": type,\n\"variables\": [variable[\"name\"] for variable in variables],\n},\n\"url\": url,\n}\nreturn self.update(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.update_cli_template_group","title":"update_cli_template_group","text":"<pre><code>update_cli_template_group(name: str, description: str = '', member: Optional[List[str]] = None, variables: Optional[List[dict]] = None) -&gt; FMGResponse\n</code></pre> <p>Update CLI template group</p> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def update_cli_template_group(\nself,\nname: str,\ndescription: str = \"\",\nmember: Optional[List[str]] = None,\nvariables: Optional[List[dict]] = None,\n) -&gt; FMGResponse:\n\"\"\"Update CLI template group\"\"\"\nif not variables:\nvariables = []\nif not member:\nmember = []\nif self._settings.adom == \"global\":\nurl = \"/pm/config/global/obj/cli/template-group\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/cli/template-group\"\nrequest = {\n\"data\": {\n\"description\": description,\n\"name\": name,\n\"member\": member,\n\"variables\": [variable[\"name\"] for variable in variables],\n},\n\"url\": url,\n}\nreturn self.update(request)\n</code></pre>"},{"location":"reference/fmg_api/connection/#fmg_api.connection.FMGSync.update_fmg_variable","title":"update_fmg_variable","text":"<pre><code>update_fmg_variable(name: str, value: Optional[str] = None, description: Optional[str] = None) -&gt; FMGResponse\n</code></pre> <p>Update metadata variable to use in CLI templates</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>variable name</p> required <code>value</code> <code>str</code> <p>default value</p> <code>None</code> <code>description</code> <code>str</code> <p>variable description</p> <code>None</code> Source code in <code>fortimanager_template_sync/fmg_api/connection.py</code> <pre><code>def update_fmg_variable(\nself, name: str, value: Optional[str] = None, description: Optional[str] = None\n) -&gt; FMGResponse:\n\"\"\"Update metadata variable to use in CLI templates\n    Args:\n        name (str): variable name\n        value (str): default value\n        description (str): variable description\n    \"\"\"\nif self._settings.adom == \"global\":\nurl = \"/pm/config/global/obj/fmg/variable\"\nelse:\nurl = f\"/pm/config/adom/{self._settings.adom}/obj/fmg/variable\"\nrequest = {\n\"data\": {\n\"description\": description,\n\"name\": name,\n\"value\": value,\n},\n\"url\": url,\n}\nreturn self.update(request)\n</code></pre>"},{"location":"reference/fmg_api/data/","title":"data","text":"<p>Pydantic data types</p>"},{"location":"reference/fmg_api/data/#fmg_api.data.CLITemplate","title":"CLITemplate","text":"<p>             Bases: <code>BaseModel</code></p> <p>CLI template model</p> <p>Docs for assigning template to device https://fndn.fortinet.net/index.php?/stackoverflow/topic/607-cli-template/&amp;tab=comments#comment-2602</p>"},{"location":"reference/fmg_api/data/#fmg_api.data.CLITemplate.standardize_provision","title":"standardize_provision","text":"<pre><code>standardize_provision(v)\n</code></pre> <p>Convert int to string</p> Source code in <code>fortimanager_template_sync/fmg_api/data.py</code> <pre><code>@field_validator(\"provision\", mode=\"before\")\ndef standardize_provision(cls, v):\n\"\"\"Convert int to string\"\"\"\nif type(v) is int:\nreturn [\"disable\", \"enable\"][v]\nelse:\nreturn v\n</code></pre>"},{"location":"reference/fmg_api/data/#fmg_api.data.CLITemplate.standardize_type","title":"standardize_type","text":"<pre><code>standardize_type(v)\n</code></pre> <p>Convert int to string</p> Source code in <code>fortimanager_template_sync/fmg_api/data.py</code> <pre><code>@field_validator(\"type\", mode=\"before\")\ndef standardize_type(cls, v):\n\"\"\"Convert int to string\"\"\"\nif type(v) is int:\nreturn [\"cli\", \"jinja\"][v]\nelse:\nreturn v\n</code></pre>"},{"location":"reference/fmg_api/data/#fmg_api.data.CLITemplateGroup","title":"CLITemplateGroup","text":"<p>             Bases: <code>BaseModel</code></p> <p>CLI Template Group model</p>"},{"location":"reference/fmg_api/data/#fmg_api.data.TemplateTree","title":"TemplateTree","text":"<p>Template data structure</p> <p>Attributes:</p> Name Type Description <code>pre_run_templates</code> <code>List[CLITemplate]</code> <p>CLI pre-run template list</p> <code>templates</code> <code>List[CLITemplate]</code> <p>CLI template list</p> <code>template_groups</code> <code>List[CLITemplateGroup]</code> <p>CLI template group list</p>"},{"location":"reference/fmg_api/data/#fmg_api.data.TemplateTree.variables","title":"variables  <code>property</code>","text":"<pre><code>variables: List[Variable]\n</code></pre> <p>Get list of all variables</p>"},{"location":"reference/fmg_api/data/#fmg_api.data.Variable","title":"Variable","text":"<p>             Bases: <code>BaseModel</code></p> <p>Variable model</p>"},{"location":"user_guide/installation/","title":"Installation","text":""},{"location":"user_guide/installation/#installing_package","title":"Installing package","text":"<p>Released versions can be installed from pypi.org by using the <code>pip</code>. It all depends on the environment, but it's advisable to create a separate venv for the tool. Reason is that it's heavily depending on Pydantic 2, which is not straight back compatible with Pydantic 1. If a system uses Pydantic1, installing this tool can break things.</p> <pre><code># create a venv in local directory 'fmgsync'\n$ python -m venv fmgsync\n# activate venv in linux\n$ . fmgsync/bin/activate\n# same on windows\n&gt; fmgsync/Script/activate\n# update environment\n(fmgsync)$ python -m pip install -U pip\n# install tool with all features\n(fmgsync)$ python -m pip install fortimanager-template-sync[rich]\n# test if it's working\n(fmgsync)$ fmgsync -h\n# or as module (better works for github actions)\n(fmgsync)$ python -m fortimanager_template_sync -h\n</code></pre>"},{"location":"user_guide/installation/#installing_from_source","title":"Installing from source","text":"<p>The tool can be installed from GitHub</p> <pre><code># latest main branch\n$ pip install git+https://github.com/realvitya/fortimanager-template-sync.git\n# specific version tag\n$ pip install git+https://github.com/realvitya/fortimanager-template-sync.git@v1.0.0\n</code></pre> <p>If you want editor mode for development purposes, I recommend forking the project, cloning and installing it:</p> <pre><code># clone repo to local folder\n$ git clone https://github.com/{YOURACC}/fortimanager-template-sync\n# install repo in editor mode (changes will be reflected immediately)\n$ pip install -e ./fortimanager-template-sync[dev,rich]\n</code></pre>"},{"location":"user_guide/installation/#configuration","title":"Configuration","text":"<p>The tool needs information about the template repository and your FMG. Also it may need configuration for custom logging and debug. All these needs can be asked on the CLI:</p> <pre><code># show main help\n$ fmgsync -h\n# show sync help\n$ fmgsync sync -h\n</code></pre>"},{"location":"user_guide/installation/#logging_setup","title":"Logging setup","text":"<p>By default, the tool will log based on the following code:</p> Default logging setup <p>A new logging setup can be developed in case more granular logging is needed. The format should be YAML and supported by <code>logging.dictConfig</code>.</p>"},{"location":"user_guide/installation/#environment_variables","title":"Environment variables","text":"<p>It is highly advisable to use env variables as giving program arguments on the command line might expose sensitive data like passwords in the operating system logs.</p> <p>Dangerous</p> <p>Do not use program arguments which are sensitive (like token, password) in GitHub actions! Use repository secrets!</p> <p>These variables can be used:</p> Name Description Default FMGSYNC_TEMPLATE_REPO Remote repository URL - FMGSYNC_TEMPLATE_BRANCH Remote repo's branch to use main FMGSYNC_GIT_TOKEN Token for remote repo - FMGSYNC_LOCAL_REPO Local folder to keep the repo ./fmg-templates FMGSYNC_FMG_URL FMG access URL (no need to use anything after /) - FMGSYNC_FMG_USER User for FMG - FMGSYNC_FMG_PASS Password for FMG - FMGSYNC_FMG_ADOM ADOM to use root FMGSYNC_FMG_VERIFY SSL verification (true/false) true FMGSYNC_PROTECTED_FW_GROUP Tracked devices should be in this group defined on FMG automation <p><code>FMGSYNC_GIT_TOKEN</code> should be a token not used by anyone else. It's not advisable to use general PAT (personal access token), but rather a limited access token dedicated to this repo (Github fine grained PAT)</p>"},{"location":"user_guide/lab_setup/","title":"Lab setup guide","text":""},{"location":"user_guide/lab_setup/#installing_fmg_and_fg","title":"Installing FMG and FG","text":"<p>There are many options to create a lab and run Fortimanager either physically or virtually. The following method is only one way of doing it easily.</p>"},{"location":"user_guide/lab_setup/#install_hyperv_feature_under_win1011","title":"Install HyperV feature under Win10/11","text":""},{"location":"user_guide/lab_setup/#install_and_configure_vms","title":"Install and configure VMs","text":"<p>Please follow the official documentation! Deploying FMG VM on Hyper-V</p> <p>Note</p> <p>For network access, there is the mentioned option to bridge it to real NIC or use internal network like the one provided by WSL. Goal is to have GUI access from the desktop.</p> <p>After FMG, please install at least one device like a FortiGate. Deploy FortiGate VM in Hyper-V on Windows 10</p>"},{"location":"user_guide/lab_setup/#licensing","title":"Licensing","text":"<p>Easiest way is to provide Internet access to the VM and have at least an evaluation license ready.</p> <p>You can follow the procedure to register the VM: Registering your Fortimanager VM</p> <p>FortiGate license is easier as you can have one free eval license per account. Use that for the new VM!</p>"},{"location":"user_guide/lab_setup/#fmg_minimum_configuration","title":"FMG minimum configuration","text":"<p>It is advisable not to use the SuperAdmin profile for this automation. The minimum required admin profile settings are:</p>"},{"location":"user_guide/lab_setup/#admin_profile","title":"Admin profile","text":"<p>Create an admin profile for the automation user as below:</p> <ul> <li>System Settings (Read-Only)</li> <li>Device Manager (Read-Write all)</li> <li>Policy &amp; Objects (Read-Write all)</li> <li>Install Policy Package or Device Configuration (Read-Write)</li> </ul> <p>If you use Workspace mode, you may add the followings too:</p> <ul> <li>Lock/Unlock ADOM (Read-Write)</li> <li>Lock/Unlock Device/Policy Package (Read-Write)</li> </ul>"},{"location":"user_guide/lab_setup/#admin_user","title":"Admin user","text":"<p>Create a user with the above profile and enable JSON RW access!</p> <p>Note</p> <p>Currently, the underlying <code>pyfortinet</code> library does not support any other authentication method than user/pass. You cannot use token or SAML authentication at the moment.</p>"},{"location":"user_guide/lab_setup/#create_a_group_for_the_devices","title":"Create a group for the devices","text":"<p>This group will be used to check and monitor device status. The tool won't deploy changes to firewalls which are not member of this group. Though the tool can update CLI templates which are assigned to other firewalls, the intention with this group is to only deploy these changes to firewalls which are in production and not under staging/troubleshooting/etc., where a deployment would interfere with others.</p> <p>Tip</p> <p>Do not assign provision templates or template groups to this group! This group is to indicate which device to keep  track by this tool.</p>"},{"location":"user_guide/quickstart/","title":"Quick Start Guide","text":""},{"location":"user_guide/quickstart/#installation","title":"Installation","text":"<p>In most cases installation via pip is the simplest and best way to install the software. See here for advanced installation details.</p> <pre><code># installing via pip\n$ pip install fortimanager-template-sync\n</code></pre>"},{"location":"user_guide/quickstart/#setup","title":"Setup","text":"<p>Preparing template repository should be the first step. As it deserves its own guide, please check Repository Setup!</p> <p>The above guide is a general setup guide for the template repository. As there are many online Git based collaboration tools (like GitHub, Bitbucket, GitLab), there are different implementation possibilities of the CI/CD pipelines.</p> <p>This guide will use GitHub: GitHub useful repository settings!</p>"},{"location":"user_guide/quickstart/#configure_software","title":"Configure software","text":"<p>It is advisable to use environment variables to configure the code run.</p> <p>These are the usable variables with example data:</p> <p>Info</p> <p>While running the tool in terminal, it's possible to create an <code>fmgsync.env</code> file with this content. It will be read by the tool. Just beware that sensitive data can be read by other users in the system!</p> <pre><code>FMGSYNC_TEMPLATE_REPO=https://someserver/fortinet-templates.git\nFMGSYNC_TEMPLATE_BRANCH=acceptance\nFMGSYNC_GIT_TOKEN=verysecret\nFMGSYNC_LOCAL_REPO=somedir\nFMGSYNC_FMG_URL=https://myfmg/\nFMGSYNC_FMG_USER=fmgsync\nFMGSYNC_FMG_PASS=verysecret\nFMGSYNC_FMG_ADOM=test\nFMGSYNC_PROTECTED_FW_GROUP=production\n</code></pre> <p>Tip</p> <p>By using GitHub environments it is possible to configure the variables based on which branch are we working with. For example production and acceptance FMG or ADOM can be different.</p>"},{"location":"user_guide/quickstart/#running_the_tool","title":"Running the tool","text":"<p>Note</p> <p>Before running the tool, FMG must be setup. Read the FMG minimum configuration what to do on the FMG!</p>"},{"location":"user_guide/quickstart/#main_options","title":"Main options","text":"<pre><code>$ fmgsync -h\n\nUsage: fmgsync [OPTIONS] COMMAND [ARGS]...\n\nFortimanager Template Sync\n\nOptions:\n  -V, --version              print version\n  -l, --logging_config TEXT  logging config file in YAML format\n  -D, --debug                debug logs  [default: 0]\n-h, --help                 Show this message and exit.\n\nCommands:\n  deploy  Firewall deployment operation\n  sync    GIT/FMG sync operation\n</code></pre>"},{"location":"user_guide/quickstart/#sync","title":"Sync","text":"<p>These options should come from environment variables, but can be specified as cmd line argument:</p> <pre><code>$ fmgsync sync -h\n\nUsage: fmgsync sync [OPTIONS]\nGIT/FMG sync operation\n\nOptions:\n  -t, --template-repo TEXT        Template repository URL  [env var: FMGSYNC_TEMPLATE_REPO]\n-b, --template-branch TEXT      Branch in repository to sync  [env var: FMGSYNC_TEMPLATE_BRANCH; default: main]\n--git-token TEXT                [env var: FMGSYNC_GIT_TOKEN]\n-l, --local-path PATH           [env var: FMGSYNC_LOCAL_REPO; default: ./fmg-templates/]\n-url, --fmg-url TEXT            [env var: FMGSYNC_FMG_URL]\n-u, --fmg-user TEXT             [env var: FMGSYNC_FMG_USER]\n-p, --fmg-pass TEXT             [env var: FMGSYNC_FMG_PASS]\n-a, --fmg-adom TEXT             [env var: FMGSYNC_FMG_ADOM; default: root]\n--fmg-verify / --no-fmg-verify  [env var: FMGSYNC_FMG_VERIFY; default: fmg-verify]\n-pg, --protected-firewall-group TEXT\n                                  This group in FMG will be checked for FW status. Also this group will be deployed\n                                  only  [env var: FMGSYNC_PROTECTED_FW_GROUP; default: automation]\n-d, --delete-unused-templates\n  -f, --force-changes             do changes\n  -h, --help                      Show this message and exit.\n</code></pre> <p>To run a dry-run sync which doesn't modify FMG at all but clone the Git repository locally, run the command without any option:</p> <pre><code>$ fmgsync sync\n\n[2024-03-21 22:50:07] - INFO - sync_task.py:125 - Checking out template repository\n[2024-03-21 22:50:07] - INFO - sync_task.py:132 - Cloning template repository\n[2024-03-21 22:50:08] - INFO - sync_task.py:145 - Load files from repository\n[2024-03-21 22:50:08] - INFO - common_task.py:82 - Gathering firewall statuses in group 'automation'\n[2024-03-21 22:50:08] - INFO - sync_task.py:279 - Loading templates from FMG\n[2024-03-21 22:50:09] - INFO - sync_task.py:442 - Updating templates\n[2024-03-21 22:50:09] - INFO - sync_task.py:452 - TEST - Updating template 'test_banner'\n[2024-03-21 22:50:09] - INFO - sync_task.py:452 - TEST - Updating template 'test_default-gw'\n[2024-03-21 22:50:09] - INFO - sync_task.py:464 - TEST - Updating template_group 'test_global'\n[2024-03-21 22:50:09] - INFO - sync_task.py:94 - No changes happened\n[2024-03-21 22:50:09] - INFO - sync_run.py:69 - Operation took 1.6s\n[2024-03-21 22:50:09] - INFO - sync_run.py:71 - Sync task finished successfully!\n</code></pre> <p>Running the tool in write mode:</p> <pre><code>$ fmgsync -DDD sync -f\n\n[2024-03-23 19:46:32] - INFO - sync_task.py:128 - Checking out template repository\n[2024-03-23 19:46:33] - INFO - sync_task.py:148 - Load files from repository\n[2024-03-23 19:46:33] - DEBUG - sync_task.py:152 - Loading templates from fmgsync-repo\\templates\n[2024-03-23 19:46:33] - DEBUG - sync_task.py:195 - Parsing 'test_banner' template\n[2024-03-23 19:46:33] - DEBUG - sync_task.py:195 - Parsing 'test_dns' template\n[2024-03-23 19:46:33] - DEBUG - sync_task.py:162 - Loading pre-run templates from fmgsync-repo\\pre-run\n[2024-03-23 19:46:33] - DEBUG - sync_task.py:195 - Parsing 'test_FG101F-init' template\n[2024-03-23 19:46:33] - DEBUG - sync_task.py:173 - Loading template groups from fmgsync-repo\\template-groups\n[2024-03-23 19:46:33] - DEBUG - sync_task.py:248 - Parsing 'test_global' group\n[2024-03-23 19:46:34] - INFO - common_task.py:82 - Gathering firewall statuses in group 'automation'\n[2024-03-23 19:46:34] - DEBUG - common_task.py:91 - Found 1 devices\n[2024-03-23 19:46:34] - DEBUG - common_task.py:105 - Device FG01: {'conf_status': 'insync', 'db_status': 'nomod', 'dev_status': 'installed', 'cli_status': {'root': {'name': 'test_global', 'status': 'modified', 'type': 'cli'}}}\n[2024-03-23 19:46:34] - DEBUG - sync_task.py:295 - 1 pre-run templates loaded\n[2024-03-23 19:46:34] - DEBUG - sync_task.py:306 - 3 templates loaded\n[2024-03-23 19:46:34] - DEBUG - sync_task.py:318 - 1 template groups loaded\n[2024-03-23 19:46:34] - INFO - sync_task.py:445 - Updating templates\n[2024-03-23 19:46:34] - INFO - sync_task.py:94 - Changes applied successfully\n[2024-03-23 19:46:34] - INFO - sync_run.py:68 - Operation took 1.85s\n[2024-03-23 19:46:34] - INFO - sync_run.py:70 - Sync task finished successfully!\n</code></pre> <p>Now, the lab firewall should have a CLI template modified status and the next phase is Deployment:</p>"},{"location":"user_guide/quickstart/#deploy","title":"Deploy","text":"<p>First, here is an output for a test run:</p> <pre><code>$ fmgsync -DDD deploy [2024-03-23 19:46:41] - INFO - common_task.py:82 - Gathering firewall statuses in group 'automation'\n[2024-03-23 19:46:41] - DEBUG - common_task.py:91 - Found 1 devices\n[2024-03-23 19:46:41] - DEBUG - common_task.py:105 - Device FG01: {'conf_status': 'insync', 'db_status': 'nomod', 'dev_status': 'installed', 'cli_status': {'root': {'name': 'test_global', 'status': 'modified', 'type': 'cli'}}}\n[2024-03-23 19:46:41] - DEBUG - deploy_task.py:124 - Found 1 firewall/VDOMs to deploy\n[2024-03-23 19:46:41] - INFO - deploy_task.py:145 - TEST - to deploy to {'FG01': ['root']}\n[2024-03-23 19:46:41] - INFO - deploy_task.py:67 - No checking required\n[2024-03-23 19:46:41] - INFO - deploy_run.py:69 - Operation took 0.05s\n[2024-03-23 19:46:41] - INFO - deploy_run.py:71 - Deploy task finished successfully!\n</code></pre> <p>The <code>test_global</code> template group has <code>modified</code> status, meaning it need to be installed on the device. This test run only indicates, which device would be installed.</p> <p>Here is the output for the actual installation:</p> <pre><code>$ fmgsync -DDD deploy -f\n\n[2024-03-23 20:41:45] - INFO - common_task.py:82 - Gathering firewall statuses in group 'automation'\n[2024-03-23 20:41:45] - DEBUG - common_task.py:91 - Found 1 devices\n[2024-03-23 20:41:45] - DEBUG - common_task.py:105 - Device FG01: {'conf_status': 'insync', 'db_status': 'nomod', 'dev_status': 'installed', 'cli_status': {'root': {'name': 'test_global', 'status': 'modified', 'type': 'cli'}}}\n[2024-03-23 20:41:45] - INFO - deploy_task.py:124 - Found 1 firewall/VDOMs to deploy\n[2024-03-23 20:41:45] - DEBUG - deploy_task.py:147 - Deploying to [Scope(name='FG01', vdom='root')]\n[2024-03-23 20:41:45] - INFO - deploy_task.py:151 - Running install for 1 items\n[2024-03-23 20:41:47] - DEBUG - deploy_task.py:135 - 0%: start to install dev (FG01)\n[2024-03-23 20:41:49] - DEBUG - deploy_task.py:135 - 52%: init state: start to get pre-checksum\n[2024-03-23 20:41:53] - DEBUG - deploy_task.py:135 - 62%: script done state: start to FGFM install\n[2024-03-23 20:42:01] - DEBUG - deploy_task.py:135 - 85%: fgfm install state: prepare to post-checksum\n[2024-03-23 20:42:05] - DEBUG - deploy_task.py:135 - 90%: post-checksum state: start verification\n[2024-03-23 20:42:09] - DEBUG - deploy_task.py:135 - 95%: install and save finished status=OK\n[2024-03-23 20:42:13] - DEBUG - deploy_task.py:135 - 100%: install and save finished status=OK\n[2024-03-23 20:42:13] - INFO - common_task.py:82 - Gathering firewall statuses in group 'automation'\n[2024-03-23 20:42:13] - DEBUG - common_task.py:91 - Found 1 devices\n[2024-03-23 20:42:13] - DEBUG - common_task.py:105 - Device FG01: {'conf_status': 'insync', 'db_status': 'nomod', 'dev_status': 'installed', 'cli_status': {'root': {'name': 'test_global', 'status': 'installed', 'type': 'cli'}}}\n[2024-03-23 20:42:13] - INFO - deploy_task.py:124 - Found 0 firewall/VDOMs to deploy\n[2024-03-23 20:42:13] - INFO - deploy_task.py:65 - CLI template install task ran successfully\n[2024-03-23 20:42:13] - INFO - deploy_run.py:69 - Operation took 28.52s\n[2024-03-23 20:42:13] - INFO - deploy_run.py:71 - Deploy task finished successfully!\n</code></pre>"},{"location":"user_guide/repository/","title":"Template repository","text":"<p>The repository is expected to be a remote repository on a platform like GitHUB, GitLab, Bitbucket, etc. This project only reads the remote repository, there is no need to provide full access.</p>"},{"location":"user_guide/repository/#structure","title":"Structure","text":"<p>This section is about how the repository is expected by the sync tool. There is an example structure attached in this project: Example repository</p>"},{"location":"user_guide/repository/#directory_structure","title":"Directory structure","text":"<p>Only the following directories are searched for <code>.j2</code> files which are the Jinja2 templates containing configuration:</p> <ul> <li>pre-run</li> <li>templates</li> <li>template-groups</li> </ul> <p>All other files or directories are simply ignored. You can even keep Jinja files anywhere else in the directory structure, only those directories above will be scanned.</p> <p>Example structure:</p> <pre><code>fmgsync-repo\n|\n\u2502   README.md\n\u2502\n\u251c\u2500\u2500\u2500.github\n\u2502       pull_request_template.md\n\u2502\n\u251c\u2500\u2500\u2500pre-run\n\u2502       test_FG101F-init.j2\n\u2502\n\u251c\u2500\u2500\u2500template-groups\n\u2502       test_global.j2\n\u2502\n\u2514\u2500\u2500\u2500templates\n        test_banner.j2\n        test_default-gw.j2\n        test_dns.j2\n</code></pre>"},{"location":"user_guide/repository/#template_format","title":"Template format","text":"<p>Each template should have an initial comment which serves as documentation and source metadata information. It can be omitted but then description or default values won't be added.</p> <p>Example Template</p> <p>This is the expected format of a Template. First section is called header comment.</p> <p>Note</p> <p>Used vars and Assigned to are optional. Not all templates need them.</p> <pre><code>{# This is the description for the template\nThis is only comments for the template\nIt can be multilined\n\nEmpty lines accepted\nHere come the variable definitions:\n#Used vars:\nvariable1: description (default: default value1)\nvariable2: description (default: value2)\n#Assigned to: {\"name\": \"test-group\"}\n#}\n...\nConfiguration snippets\n...\n</code></pre>"},{"location":"user_guide/repository/#metadata_variables","title":"Metadata variables","text":"<p>Metadata variables are figured out from the template itself. To specify default value and description for a metadata variable, please specify it in the header comment.</p> <p>Syntax:</p> <p>Note</p> <p>Description and default value are optional but advisable.</p> <pre><code>#Used vars:\nvariable1: var1 description (default: default value1)\nvariable2\nvariable3: var3 description\n</code></pre> <p>FMG editor for Metadata variables is at <code>Policy&amp;Objects/Object Configurations/Advanced/Metadata Variables</code>. If it's not there, it must be enabled by the <code>Feature Visibility</code> settings in <code>Tools</code> menu: <code>Advanced/Metadata Variables</code></p> <p>Sync tool will create or update metadata variables only if it finds one which is not yet in use. It won't affect existing variables. If you need to edit a variable, please login to FMG and do the change manually! This is to avoid accidental or unintentional changes across devices which for example rely on a default value (e.g. mgmt_interface)</p> <p>Warning</p> <p>If a variable is used in the Jinja template, it must be ensured that the variable has value for all the devices! Otherwise the installation will fail and log will show which device failed with lack of metavariable values.</p>"},{"location":"user_guide/repository/#assignment_configuration","title":"Assignment configuration","text":"<p>In the header comment it is possible to configure assignment of this template to certain groups or devices. This line is looking like this:</p> <p><code>#Assigned to: {\"name\": \"test-group\"}</code></p> <p>It is possible to assign the template to multiple things:</p> <p><code>#Assigned to: [{\"name\": \"firewall1\", \"vdom\": \"root\"}, {\"name\": \"region-ea\"}]</code></p>"},{"location":"user_guide/repository/#template-group_format","title":"Template-group format","text":"<p>Template groups also have a header part where description and assignment information can be stored.</p> <p>Member templates in the group are specified by Jinja2 <code>include</code> command. Only jinja templates from the <code>templates</code> or the <code>templates-groups</code> folder must be used!</p> <p>Example template group with some members:</p> <pre><code>{# Global templates\nThese templates will appear in FMG in this order.\nVariables will be gathered from them and there must be no conflict between variable default values otherwise, \nthe sync operation will stop!\n#assigned to: {\"name\": \"test-group\"}\n#}\n\n{% include \"templates/test_banner.j2\" %}\n\n{% include \"templates/test_dns.j2\" %}\n</code></pre>"},{"location":"user_guide/repository/#extra_information","title":"Extra information","text":"<p>The tool will only look for the Jinja files in the template folders. It is possible and even desirable to add more files to this repository such as GitHub actions, README or other useful data.</p>"}]}